[{
  "type": "project",
  "url": "https://www.instructables.com/Come-Home-Connecting-Distant-Spaces-via-Arduino-Ca",
  "title": "Come Home! Connecting Distant Spaces EASILY Over Web",
  "isFeatured": true,
  "numberOfViews": 4487,
  "numberOfLikes": 47,
  "numberOfComments": 4,
  "categories": [
    "Circuits",
    "Arduino"
  ],
  "steps": [
    {
      "title": "Introduction: Come Home! Connecting Distant Spaces EASILY Over Web",
      "media": [
        {
          "src": "https://content.instructables.com/F28/42KU/I0QJBC67/F2842KUI0QJBC67.png?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Come Home! Connecting Distant Spaces EASILY Over Web"
        },
        {
          "src": "https://content.instructables.com/FZR/VGOS/I0QJBC60/FZRVGOSI0QJBC60.png?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Come Home! Connecting Distant Spaces EASILY Over Web"
        },
        {
          "src": "https://content.instructables.com/F98/N1CG/I0R0TW45/F98N1CGI0R0TW45.png?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Come Home! Connecting Distant Spaces EASILY Over Web"
        }
      ],
      "body": "Visit blinkblinkstem.com for more projects like this! Can you believe that we live in an age where you can touch an object (any object - if it has metal on it) and a light will turn on in your loved-one's space - even if they live in a different city, state, or country!? You could tell your loved ones or friends when you're missing them, or when dinner is ready. The world is yours!We're going to show you how to connect spaces using an online websockets connector called Spacebrew. Spacebrew is easy to use and free! In this Instructable you were going to learn how to connect distant spaces via Arduino, Processing, CapSense, and Spacebrew. If you've never heard of some of these programs/libraries, don't worry. We'll step you through it and we're providing commented code to help you along. We're going to show you what we did, but you can feel free to make  your own inputs and outputs based on your own needs. You're going to need: 2 Arduino Unos1 M Ohm ResistorConductive fabric, tape, or foilAligator clips Jumper wire 1 Breadboard1 LEDArduino IDE Capsense Library for ArduinoProcessing IDESpacebrew Library for Processing",
      "html": "<p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"500\" mozallowfullscreen=\"\" src=\"//player.vimeo.com/video/107646601?color=ffffff\" webkitallowfullscreen=\"\" width=\"500\"></iframe></p><p>Visit <a href=\"http://blinkblinkstem.com\" rel=\"nofollow noopener noreferrer\">blinkblinkstem.com</a> for more projects like this! </p><p>Can you believe that we live in an age where you can touch an object (any object - if it has metal on it) and a light will turn on in your loved-one's space - even if they live in a different city, state, or country!? You could tell your loved ones or friends when you're missing them, or when dinner is ready. The world is yours!</p><p>We're going to show you how to connect spaces using an online websockets connector called Spacebrew. Spacebrew is easy to use and free! </p><p>In this Instructable you were going to learn how to connect distant spaces via Arduino, Processing, CapSense, and Spacebrew. If you've never heard of some of these programs/libraries, don't worry. We'll step you through it and we're providing commented code to help you along. </p><p>We're going to show you what we did, but you can feel free to make  your own inputs and outputs based on your own needs. </p><p><strong>You're going to need: </strong></p><p>2 Arduino Unos</p><p>1 M Ohm Resistor</p><p>Conductive fabric, tape, or foil</p><p>Aligator clips </p><p>Jumper wire </p><p>1 Breadboard</p><p>1 LED</p><p>Arduino IDE </p><p><a href=\"http://playground.arduino.cc/Main/CapacitiveSensor?from=Main.CapSense\" rel=\"nofollow noopener noreferrer\">Capsense Library for Arduino</a></p><p>Processing IDE</p><p><a href=\"https://github.com/Spacebrew/spacebrewP5\" rel=\"nofollow noopener noreferrer\">Spacebrew Library for Processing </a></p>"
    },
    {
      "title": "Step 1: Setting Up the Arduino",
      "media": [
        {
          "src": "https://content.instructables.com/F1G/PCDA/I0QJBC6H/F1GPCDAI0QJBC6H.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Setting Up the Arduino"
        },
        {
          "src": "https://content.instructables.com/F6V/F1B8/I0QJBC6F/F6VF1B8I0QJBC6F.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Setting Up the Arduino"
        }
      ],
      "body": "You're going to want to configure your Arduino Uno first and download the Capsense Library.You're going to want to connect an alligator clip to the wire connected to your resistor. Attach conductive tape, foil, or any other highly conductive material to the other end of the alligator clip. This will function as your versatile sensor. You can attach this to any object and with the Capsense library it will become your sensor. Here's the Capsense Library. You'll need to download it and put it in your Libraries folder. delete the \"-master\" part. Here is the Arduino code (LINK)Refer to the code as to which pins you should place your wires in. I made a piece of paper that says \"Come Home\" and cut a hole in the paper to reveal my copper tape/capacitive sensor. When I touch the copper tape, the value \"true\" will be sent over Spacebrew to a receiving Processing sketch that will turn on the LED on the receiving computer's end.",
      "html": "<p>You're going to want to configure your Arduino Uno first and download the Capsense Library.</p><p>You're going to want to connect an alligator clip to the wire connected to your resistor. Attach conductive tape, foil, or any other highly conductive material to the other end of the alligator clip. This will function as your versatile sensor. You can attach this to any object and with the Capsense library it will become your sensor. </p><p><a href=\"http://playground.arduino.cc/Main/CapacitiveSensor?from=Main.CapSense\" rel=\"nofollow noopener noreferrer\">Here's the Capsense Library. You'll need to download it and put it in your Libraries folder. delete the \"-master\" part. </a></p><p><a href=\"https://gist.github.com/joselynNeon/9adb169dad182540dda9\" rel=\"nofollow noopener noreferrer\">Here is the Arduino code (LINK)</a></p><p>Refer to the code as to which pins you should place your wires in. </p><p>I made a piece of paper that says \"Come Home\" and cut a hole in the paper to reveal my copper tape/capacitive sensor. When I touch the copper tape, the value \"true\" will be sent over Spacebrew to a receiving Processing sketch that will turn on the LED on the receiving computer's end. </p>"
    },
    {
      "title": "Step 2: Make Arduino and Processing Talk",
      "media": [
        {
          "src": "https://content.instructables.com/FCU/YDID/HU1RS00G/FCUYDIDHU1RS00G.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Make Arduino and Processing Talk "
        }
      ],
      "body": "Currently, Spacebrew, (the toolkit needed to connect the distant spaces over the internet) does not take messages directly from Arduino. We're going to need the Capsense library to be running on the Arduino (which is why we can't use standard firmata) and sending the input from the Capacitive sensor so we're going to import processing.serial* library, and send our values from the Arduino, via serial communication, to Processing. You'll also import the Spacebrew library for Processing. As the code is currently set up, when the capacitive sensor reads that you're touching the sensor, it will send \"true\". This processing sketch and the processing sketch on the other side (output side/ your loved one's side) will connect via spacebrew, and the output sketch will light up the LED when it received \"true\". Read through the sketch's comments to see how it is working. Spacebrew Library for ProcessingProcessing Sketch",
      "html": "<p>Currently, Spacebrew, (the toolkit needed to connect the distant spaces over the internet) does not take messages directly from Arduino. We're going to need the Capsense library to be running on the Arduino (which is why we can't use standard firmata) and sending the input from the Capacitive sensor so we're going to import processing.serial* library, and send our values from the Arduino, via serial communication, to Processing. </p><p>You'll also import the Spacebrew library for Processing. As the code is currently set up, when the capacitive sensor reads that you're touching the sensor, it will send \"true\". This processing sketch and the processing sketch on the other side (output side/ your loved one's side) will connect via spacebrew, and the output sketch will light up the LED when it received \"true\". Read through the sketch's comments to see how it is working. </p><p><a href=\"https://github.com/Spacebrew/spacebrewP5\" rel=\"nofollow noopener noreferrer\">Spacebrew Library for Processing</a></p><p><a href=\"https://gist.github.com/joselynNeon/8c9fba5783a2daa9b21d\" rel=\"nofollow noopener noreferrer\">Processing Sketch </a></p>"
    },
    {
      "title": "Step 3: Arduino and Led on OUTPUT Side",
      "media": [
        {
          "src": "https://content.instructables.com/F7D/WAML/HZTT8EZZ/F7DWAMLHZTT8EZZ.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Arduino and Led on OUTPUT Side"
        },
        {
          "src": "https://content.instructables.com/FMZ/DJRV/I0QJBC5Q/FMZDJRVI0QJBC5Q.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Arduino and Led on OUTPUT Side"
        },
        {
          "src": "https://content.instructables.com/FDD/YBIH/I0QJBC5N/FDDYBIHI0QJBC5N.png?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Arduino and Led on OUTPUT Side"
        },
        {
          "src": "https://content.instructables.com/FTO/26X8/I0R0TSEF/FTO26X8I0R0TSEF.png?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Arduino and Led on OUTPUT Side"
        },
        {
          "src": "https://content.instructables.com/FKO/740W/I0QJBC5X/FKO740WI0QJBC5X.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Arduino and Led on OUTPUT Side"
        }
      ],
      "body": "You'll want to set up the receiving Arduino now. It's extremely simple. Just attach the ground (shorter leg of your LED) to ground using copper tape and alligator clips or wire, and the power (longer leg of your LED) to pin 13 on your Arduino. You're good to go.",
      "html": "<p>You'll want to set up the receiving Arduino now. It's extremely simple. Just attach the ground (shorter leg of your LED) to ground using copper tape and alligator clips or wire, and the power (longer leg of your LED) to pin 13 on your Arduino. You're good to go. </p>"
    },
    {
      "title": "Step 4: Receiving the Input",
      "media": [],
      "body": "So now you'll be working on the Processing sketch that will receive the messages from the Capacitive Sensor on the other side - the output side. We chose to make a project that lights up an LED on a building when the the input capacitive sensor is touched and the \"true\" value is received via Spacebrew connection. Here is the link to the output/receiving Processing sketch.",
      "html": "<p>So now you'll be working on the Processing sketch that will receive the messages from the Capacitive Sensor on the other side - the output side. We chose to make a project that lights up an LED on a building when the the input capacitive sensor is touched and the \"true\" value is received via Spacebrew connection. </p><p><a href=\"https://gist.github.com/joselynNeon/8d4ecf84f9acee042240\" rel=\"nofollow noopener noreferrer\">Here is the link to the output/receiving Processing sketch. </a></p>"
    },
    {
      "title": "Step 5: Connect the Two Processing Sketch in Spacebrew",
      "media": [
        {
          "src": "https://content.instructables.com/FRZ/0XNA/I0QJBC5Y/FRZ0XNAI0QJBC5Y.png?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Connect the Two Processing Sketch in Spacebrew"
        },
        {
          "src": "https://content.instructables.com/FY3/OUEL/I0R0TTUY/FY3OUELI0R0TTUY.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Connect the Two Processing Sketch in Spacebrew"
        }
      ],
      "body": "1. Run the Output processing sketch2. Run the Input processing sketch3. Connect the two notes on Spacebrew's public spacebrew session (LINK)4. VOILA! Now when you touch your capacitive sensor on one end, the \"true\" value is sent over Spacebrew to the computer and by extension Arduino on the other end and your LED lights up!Visit blinkblinkstem.com for more projects like this one!",
      "html": "<p>1. Run the Output processing sketch</p><p>2. Run the Input processing sketch</p><p>3. Connect the two notes on <a href=\"http://spacebrew.github.io/spacebrew/admin/admin.html?server=sandbox.spacebrew.cc\" rel=\"nofollow noopener noreferrer\">Spacebrew's public spacebrew session (LINK)</a></p><p>4. VOILA! Now when you touch your capacitive sensor on one end, the \"true\" value is sent over Spacebrew to the computer and by extension Arduino on the other end and your LED lights up!</p><p>Visit <a href=\"http://blinkblinkstem.com\" rel=\"nofollow noopener noreferrer\">blinkblinkstem.com</a> for more projects like this one!</p>"
    }
  ],
  "author": {
    "name": "Snax_and_Macs",
    "image": "https://content.instructables.com/FQ9/WNNR/HU8P1SJE/FQ9WNNRHU8P1SJE.jpg?auto=webp&crop=1%3A1&frame=1&width=130",
    "url": "https://www.instructables.com/member/Snax_and_Macs/"
  }
},
{
  "type": "project",
  "url": "https://www.instructables.com/Tools-and-Materials-1",
  "title": "Welcome & Supplies",
  "isFeatured": false,
  "numberOfViews": 21889,
  "numberOfLikes": 6,
  "numberOfComments": 0,
  "categories": [
    "Circuits",
    "Wearables"
  ],
  "steps": [
    {
      "title": "Introduction: Welcome & Supplies",
      "media": [
        {
          "src": "https://content.instructables.com/FRS/VRZM/J3OPPK5V/FRSVRZMJ3OPPK5V.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Welcome & Supplies"
        }
      ],
      "body": "This is a class for someone who would like to learn how to build electronics that live on and interact with the body. There are many disciplines of wearable computing and technology; this class focuses on creating circuits using conductive thread and fabric, programming a microcontroller with Arduino and techniques specific to soft circuits.Building wearable electronics is fun and you can build lots of creative and innovative projects once you nail down the basics and get some hands-on experience. Whether you have a project in mind, or just want to explore the possibilities, this class is for you. In this lesson, I will go over the format of the class, what you will be building, and a short (very short) history of wearable electronics.This class teaches you the basics and focuses on getting you to think creatively about wearable electronic applications. I go step-by-step with you through all the exercises as you sew and build circuits. Throughout lessons, you will also have opportunities to explore and discover on your own. You will be introduced to sewing, electronics, the combination of the two and the Arduino software. Through the majority of this class, you will be learning several concepts and techniques through building projects and by making tools that will help you through your wearable electronic adventures.When the microcontroller and the Arduino software is introduced, you will upload code see what it does then I will explain how it works and suggest ways to alter it so you can see how it works.",
      "html": "<p>This is a class for someone who would like to learn how to build electronics that live on and interact with the body. There are many disciplines of wearable computing and technology; this class focuses on creating circuits using conductive thread and fabric, programming a microcontroller with Arduino and techniques specific to soft circuits.</p><p>Building wearable electronics is fun and you can build lots of creative and innovative projects once you nail down the basics and get some hands-on experience. Whether you have a project in mind, or just want to explore the possibilities, this class is for you. In this lesson, I will go over the format of the class, what you will be building, and a short (very short) history of wearable electronics.</p><p>This class teaches you the basics and focuses on getting you to think creatively about wearable electronic applications. I go step-by-step with you through all the exercises as you sew and build circuits. Throughout lessons, you will also have opportunities to explore and discover on your own. You will be introduced to sewing, electronics, the combination of the two and the Arduino software. Through the majority of this class, you will be learning several concepts and techniques through building projects and by making tools that will help you through your wearable electronic adventures.</p><p>When the microcontroller and the Arduino software is introduced, you will upload code see what it does then I will explain how it works and suggest ways to alter it so you can see how it works.</p>"
    },
    {
      "title": "Step 1: Class Projects",
      "media": [],
      "body": "The LED Pin or Patch project is a project that gets you familiar with electricity and introduces you to conductive thread.Topics:+ how to work with conductive thread+ intro to electronics (voltage, resistance, current, parallel and series)+ the running stitchThe Snap Switch and Modular LilyPad projects speak to techniques and tools that you will want to use time and again if you continue to build wearable projects.Topics:+ what a switch is and how to make one+ how to make different connections when building wearable electronics+ the basting stitchThe Hi-5 Collector is a project that makes social interaction game-like by introducing a goal to achieve by collecting high-fives. Itteaches you how to design a switch for a specific physical action, make a simple pattern and introduces you to the digital input and how to insulate a soft circuit.Topics:+ introduction to Arduino software+ how to upload and manipulate Arduino sketches + digital input and output+ how to transfer a circuit from alligator clips to fabric+ the uneven running stitch+ how to insulate soft circuitsThe Slouch Alert is a project that teaches you how to read a body's movements using a handmade flex sensor and alerts you when you are slouching. With the same circuit, I will also go over briefly how to trigger audio files by turning the LilyPad USB into a keyboard and using it with Soundplant, a sound triggering software.Topics:+ analog input and output+ how to make a flex sensor+ building a circuit out of conductive fabric+ making the LilyPad USB into a keyboardLED patch or pinSnap switch/ground breakout padModular LilyPadHi-5 collectorHandmade flex sensorSlouch Alert",
      "html": "<p>The <em style=\"background-color: initial;\">LED Pin or Patch</em> project is a project that gets you familiar with electricity and introduces you to conductive thread.<span id=\"selection-marker-1\" class=\"redactor-selection-marker\"></span></p><p>Topics:</p><p>+ how to work with conductive thread<br>+ intro to electronics (voltage, resistance, current, parallel and series)<br>+ the running stitch</p><p>The <em>Snap Switch</em> and <em>M</em><em>odular LilyPad</em> projects speak to techniques and tools that you will want to use time and again if you continue to build wearable projects.</p><p>Topics:</p><p>+ what a switch is and how to make one<br>+ how to make different connections when building wearable electronics<br>+ the basting stitch</p><p>The <em>H</em><em>i-5 Collector</em> is a project that makes social interaction game-like by introducing a goal to achieve by collecting high-fives. It<i style=\"background-color: initial;\"></i>teaches you how to <em>design a switch</em> for a specific physical action, make a simple pattern and introduces you to the digital input and how to insulate a soft circuit.</p><p>Topics:</p><p>+ introduction to Arduino software<br>+ how to upload and manipulate Arduino sketches <br>+ digital input and output<br>+ how to transfer a circuit from alligator clips to fabric<br>+ the uneven running stitch<br>+ how to insulate soft circuits</p><p>The <em>Slouch Alert</em> is a project that teaches you how to read a body's movements using a <em>handmade flex sensor </em>and alerts you when you are slouching. With the same circuit, I will also go over briefly how to trigger audio files by turning the LilyPad USB into a keyboard and using it with Soundplant, a sound triggering software.</p><p>Topics:</p><p>+ analog input and output<br>+ how to make a flex sensor<br>+ building a circuit out of conductive fabric<br>+ making the LilyPad USB into a keyboard</p><p class=\"spacer-thing\"></p><p class=\"left-thing\"><img src=\"https://content.instructables.com/FMO/LEFG/IN0FGS9G/FMOLEFGIN0FGS9G.jpg?auto=webp&amp;fit=bounds&amp;frame=1&amp;height=1024&amp;width=1024\"><br>LED patch or pin</p><p class=\"right-thing\"><img src=\"https://content.instructables.com/FZY/97W7/INHQUSTU/FZY97W7INHQUSTU.jpg?auto=webp&amp;fit=bounds&amp;frame=1&amp;height=1024&amp;width=1024\"><br>Snap switch/ground breakout pad</p><p class=\"spacer-thing\"></p><p class=\"left-thing\"><img src=\"https://content.instructables.com/FYY/UZDG/IMATJQ9H/FYYUZDGIMATJQ9H.jpg?auto=webp&amp;fit=bounds&amp;frame=1&amp;height=1024&amp;width=1024\"><br>Modular LilyPad</p><p class=\"right-thing\"><img src=\"https://content.instructables.com/FCY/ILR9/INGBEHS3/FCYILR9INGBEHS3.jpg?auto=webp&amp;fit=bounds&amp;frame=1&amp;height=1024&amp;width=1024\"><br>Hi-5 collector</p><p class=\"spacer-thing\"></p><p class=\"left-thing\"><img src=\"https://content.instructables.com/FVE/XAP6/IOVPNHZ1/FVEXAP6IOVPNHZ1.jpg?auto=webp&amp;fit=bounds&amp;frame=1&amp;height=1024&amp;width=1024\"><br><span class=\"caption-thing\">Handmade flex sensor</span></p><p class=\"right-thing\"><img src=\"https://content.instructables.com/F5F/421E/IOSPDUM8/F5F421EIOSPDUM8.jpg?auto=webp&amp;fit=bounds&amp;frame=1&amp;height=1024&amp;width=1024\"><br><span class=\"caption-thing\">Slouch Alert</span></p>"
    },
    {
      "title": "Step 2: What Are Wearable Electronics?",
      "media": [],
      "body": "Wearable technology has been around for quite some time. Although purely mechanical, one of the first game-changers was the pocket watch. As we got better at harnessing electricity, inventions like batteries, radios, and the transistor came to be.The first wearable computer is documented to be a device created by Edward O. Thorpe and Claude Shannon. It was built to cheat at the betting game roulette by predicting where the ball would land on a roulette wheel. The whole setup consisted of a timing device in a shoe, a computer strapped across the chest and an ear piece that delivered a tone in the ear of the wearer.Wearable electronics can mean a lot of different things. It can include electronic wrist watches you find in the market today and stickers that go on the skin to monitor health designed for the future. The type of wearable electronics we will be exploring in this class are soft circuits. Soft circuits are the practice of building electronic circuits from soft and flexible conductive materials. These materials include thread, yarns, fabric, wools and even soft rubbers like silicone. In this class, you will get to work with conductive thread and fabric and a resistive plastic called Velostat.Coming from a fashion and textile background, this is what got me into wearable electronics. I find working with conductive thread and fabric promotes a certain level of hand work, craftsmanship, and troubleshooting that you don't get from using wire or circuit boards.",
      "html": "<p class=\"stepTable\"><img src=\"https://content.instructables.com/FNC/XRFD/INGBG2QG/FNCXRFDINGBG2QG.png?auto=webp&amp;fit=bounds&amp;frame=1&amp;height=1024&amp;width=1024\"></p><p>Wearable technology has been around for quite some time. Although purely mechanical, one of the first game-changers was the pocket watch. As we got better at harnessing electricity, inventions like batteries, radios, and the transistor came to be.</p><p>The first wearable computer is documented to be a device created by Edward O. Thorpe and Claude Shannon. It was built to cheat at the betting game roulette by predicting where the ball would land on a roulette wheel. The whole setup consisted of a timing device in a shoe, a computer strapped across the chest and an ear piece that delivered a tone in the ear of the wearer.</p><p>Wearable electronics can mean a lot of different things. It can include electronic wrist watches you find in the market today and stickers that go on the skin to monitor health designed for the future. The type of wearable electronics we will be exploring in this class are soft circuits. Soft circuits are the practice of building electronic circuits from soft and flexible conductive materials. These materials include thread, yarns, fabric, wools and even soft rubbers like silicone. In this class, you will get to work with conductive thread and fabric and a resistive plastic called Velostat.</p><p>Coming from a fashion and textile background, this is what got me into wearable electronics. I find working with conductive thread and fabric promotes a certain level of hand work, craftsmanship, and troubleshooting that you don't get from using wire or circuit boards.</p>"
    },
    {
      "title": "Step 3: Tools and Materials",
      "media": [
        {
          "src": "https://content.instructables.com/F9J/ZTZ5/IMM972XH/F9JZTZ5IMM972XH.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Tools and Materials"
        }
      ],
      "body": "In this lesson, you will be introduced to the materials and tools needed to take this class and where to buy them. I link to the cheapest options, trying to keep things grouped between a few companies to help with shipping costs for the international folk. If a link is no longer good or you need help finding an item, feel free to message me!Supply List:4x 8\" x 12\" sheets of wool feltFitted T-shirtSewing needlesConductive threadAll-purpose threadFabric scissorsCraft scissorsSeam ripperSoft measuring tapeRulerStraight pinsSew-on snapsFabric glue1 foot Shieldit Super conductive fabric1 foot of Velostat resistive plasticDisappearing ink fabric marker or tailor's chalkIron and ironing boardSticky back Velcro tapeHeat 'n' Bond5mm LEDsResistor kitMultimeter2 sewable coincell battery holder2 CR2032 batteries1000mAh Lipoly batteryUSB microB cableLilyPad USB microcontrollerLilyPad vibe boardSewable LEDsFlex sensorNeedlenose pliersLong alligator clip leadsShort alligator clip leadsComputer with Arduino software and USB portUSB hub if computer only has USB 3 ports (newer Macs)Light diffusion materials like hot glue sticks, parchment paper, or poly-fil",
      "html": "<p>In this lesson, you will be introduced to the materials and tools needed to take this class and where to buy them. I link to the cheapest options, trying to keep things grouped between a few companies to help with shipping costs for the international folk. If a link is no longer good or you need help finding an item, feel free to message me!</p><p><strong><u>Supply List:</u></strong></p><ul><li>4x <a href=\"http://www.amazon.com/dp/B017O90USG/?tag=instructabl09-20\" style=\"background-color: initial;\" rel=\"nofollow noopener noreferrer\">8\" x 12\" sheets of wool felt</a></li><li>Fitted T-shirt</li><li><a href=\"https://www.adafruit.com/products/615\" rel=\"nofollow noopener noreferrer\">Sewing needles</a></li><li><a href=\"https://www.adafruit.com/products/641\" rel=\"nofollow noopener noreferrer\">Conductive thread</a></li><li><a href=\"http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&amp;field-keywords=gutermann+all+purpose+thread&amp;rh=i%3Aaps%2Ck%3Agutermann+all+purpose+thread\" rel=\"nofollow noopener noreferrer\">All-purpose thread</a></li><li><a href=\"http://www.amazon.com/dp/B000UU6SR4/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Fabric scissors</a></li><li><a href=\"http://www.amazon.com/dp/B001BKHHGS/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Craft scissors</a></li><li><a href=\"http://www.amazon.com/dp/B005574EBO/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Seam ripper</a></li><li><a href=\"http://www.amazon.com/dp/B000Y3CYTI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Soft measuring tape</a></li><li><a href=\"http://www.amazon.com/dp/B000V59R8K/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Ruler</a></li><li><a href=\"http://www.amazon.com/dp/B001UAKKVI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Straight pins</a></li><li><a href=\"https://www.adafruit.com/products/1126\" rel=\"nofollow noopener noreferrer\">Sew-on snaps</a></li><li><a href=\"http://www.amazon.com/dp/B00178MNFO/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Fabric glue</a></li><li>1 foot <a href=\"http://www.lessemf.com/fabric4.html#1220\" rel=\"nofollow noopener noreferrer\">Shieldit Super conductive fabric</a></li><li><a href=\"http://www.lessemf.com/plastic.html\" rel=\"nofollow noopener noreferrer\">1 foot of Velostat resistive plastic</a></li><li><a href=\"http://www.amazon.com/dp/B000YZ7OQO/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Disappearing ink fabric marker</a> or <a href=\"http://www.amazon.com/dp/B003WMHIDU/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">tailor's chalk</a></li><li><a href=\"http://www.amazon.com/dp/B000M4D96G/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Iron</a> and <a href=\"http://www.amazon.com/dp/B000W3ODZI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">ironing board</a></li><li><a href=\"http://www.amazon.com/dp/B00N0W89Z8/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Sticky back Velcro tape</a></li><li><a href=\"http://www.amazon.com/dp/B000XAMYXI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Heat 'n' Bond</a></li><li><a href=\"https://www.sparkfun.com/products/12062\" rel=\"nofollow noopener noreferrer\">5mm LEDs</a></li><li><a href=\"https://www.sparkfun.com/products/10969\" rel=\"nofollow noopener noreferrer\">Resistor kit</a></li><li><a href=\"https://www.sparkfun.com/products/12966\" rel=\"nofollow noopener noreferrer\">Multimeter</a></li><li>2 <a href=\"https://www.sparkfun.com/products/8822\" rel=\"nofollow noopener noreferrer\">sewable coincell battery holder</a></li><li>2 <a href=\"http://www.amazon.com/Energizer-Electronic-Batteries-batteries-Lithium/dp/B0002DSVS8/ref=sr_1_7?ie=UTF8&amp;qid=1453232611&amp;sr=8-7&amp;keywords=coin+cell+battery\" rel=\"nofollow noopener noreferrer\">CR2032 batteries</a></li><li><a href=\"https://www.sparkfun.com/products/339\" rel=\"nofollow noopener noreferrer\">1000mAh Lipoly battery</a></li><li><a href=\"https://www.sparkfun.com/products/10215\" rel=\"nofollow noopener noreferrer\">USB microB cable</a></li><li><a href=\"https://www.sparkfun.com/products/12049\" rel=\"nofollow noopener noreferrer\">LilyPad USB</a> microcontroller</li><li><a href=\"https://www.sparkfun.com/products/11008\" rel=\"nofollow noopener noreferrer\">LilyPad vibe board</a></li><li><a href=\"https://www.sparkfun.com/products/10045\" rel=\"nofollow noopener noreferrer\">Sewable LEDs</a></li><li><a href=\"https://www.sparkfun.com/products/8606\" rel=\"nofollow noopener noreferrer\">Flex sensor</a></li><li><a href=\"http://www.amazon.com/Stanley-84-096-5-Inch-Needle-Plier/dp/B0001IW50Y/ref=sr_1_2?s=power-hand-tools&amp;ie=UTF8&amp;qid=1459187454&amp;sr=1-2&amp;keywords=needle+nose+pliers\" rel=\"nofollow noopener noreferrer\">Needlenose pliers</a></li><li><a href=\"https://www.adafruit.com/products/1008\" rel=\"nofollow noopener noreferrer\">Long alligator clip leads</a></li><li><a href=\"https://www.adafruit.com/products/1592\" rel=\"nofollow noopener noreferrer\">Short alligator clip leads</a></li><li>Computer with <a href=\"https://www.arduino.cc/en/Main/Software\" rel=\"nofollow noopener noreferrer\">Arduino software</a> and USB port</li><li><a href=\"https://www.adafruit.com/products/2998\" rel=\"nofollow noopener noreferrer\">USB hub</a> if computer only has USB 3 ports (newer Macs)</li><li>Light diffusion materials like <a href=\"http://www.amazon.com/dp/B001AQRLM8/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">hot glue sticks</a>, <a href=\"http://www.amazon.com/dp/B0166SPEL4/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">parchment paper</a>, or <a href=\"http://www.amazon.com/dp/B000YZ7G44/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">poly-fil</a></li></ul>"
    },
    {
      "title": "Step 4: Wool Felt",
      "media": [
        {
          "src": "https://content.instructables.com/FXK/BYEH/IMNOGPQR/FXKBYEHIMNOGPQR.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Wool Felt"
        }
      ],
      "body": "[x4] 8\" x 12\" sheets of wool felt100% sheep's wool felt is much nicer than the acrylic felt found in your local fabric store. The acrylic felt will also not be able to tolerate the heat of an iron, it's made of plastic and will melt! Buy a few colors for variety or stock up on your favorite color.",
      "html": "<p>[x4] <a href=\"http://www.amazon.com/dp/B017O90USG/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">8\" x 12\" sheets of wool felt</a></p><p style=\"margin-left: 20px;\">100% sheep's wool felt is much nicer than the acrylic felt found in your local fabric store. The acrylic felt will also not be able to tolerate the heat of an iron, it's made of plastic and will melt! Buy a few colors for variety or stock up on your favorite color.</p><p style=\"margin-left: 20px;\"></p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 5: Fitted T-shirt",
      "media": [
        {
          "src": "https://content.instructables.com/FIL/KEAM/IRXT0R6R/FILKEAMIRXT0R6R.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Fitted T-shirt"
        }
      ],
      "body": "[x1] fitted t-shirt. The fitted part is important because you will be attaching a sensor to it to read body movements. The sensor will need to be close to the body and held there in order for it to bend and move with you. The shirt should be made of a medium-weight knit because you will be sewing to it and don't want the material to tear easily.",
      "html": "<p>[x1] fitted t-shirt. </p><p style=\"margin-left: 20px;\">The fitted part is important because you will be attaching a sensor to it to read body movements. The sensor will need to be close to the body and held there in order for it to bend and move with you. The shirt should be made of a medium-weight knit because you will be sewing to it and don't want the material to tear easily.</p>"
    },
    {
      "title": "Step 6: Sewing Needles",
      "media": [
        {
          "src": "https://content.instructables.com/FCP/00Q7/IOG1G2RD/FCP00Q7IOG1G2RD.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Sewing Needles"
        }
      ],
      "body": "[x1] pack of sewing needles (embroidery recommended)This class does not require a sewing machine, instead, you will be hand sewing your projects. If you have a machine, you are welcome to use it.The needles will be used with regular and conductive thread, the latter can be fairly thick, so choose a needle that has a medium to large sized eye. The trick is to get a needle that has a large eye but isn't too thick. You can end up punching large holes in materials if the needle is too large. Embroidery needles are usually a good choice, they are thin and sharp, but have a larger eye than standard needles.",
      "html": "<p>[x1] <a href=\"https://www.adafruit.com/products/615\" rel=\"nofollow noopener noreferrer\">pack of sewing needles</a> (embroidery recommended)</p><p>This class does not require a sewing machine, instead, you will be hand sewing your projects. If you have a machine, you are welcome to use it.</p><p>The needles will be used with regular and conductive thread, the latter can be fairly thick, so choose a needle that has a medium to large sized eye. The trick is to get a needle that has a large eye but isn't too thick. You can end up punching large holes in materials if the needle is too large. Embroidery needles are usually a good choice, they are thin and sharp, but have a larger eye than standard needles.</p>"
    },
    {
      "title": "Step 7: Thread",
      "media": [
        {
          "src": "https://content.instructables.com/FZS/B9WN/IMM974LY/FZSB9WNIMM974LY.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Thread"
        },
        {
          "src": "https://content.instructables.com/FL4/SH5E/IMM974LX/FL4SH5EIMM974LX.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Thread"
        }
      ],
      "body": "[x1] bobbin  conductive 3-ply threadAdafruit, who distributes this thread, also sells 2-ply, which is thinner. The one that is more all-purpose is the 3-ply, so that is required. Feel free to purchase the 2-ply to try out for yourself.[x1] spool polyester all-purpose thread that matches your feltOnly one spool is necessary, but feel free to stock up on other colors or a small kit for variety. Gutermann is my favorite brand, so I've linked to them.",
      "html": "<p>[x1] bobbin  <a href=\"https://www.adafruit.com/products/641\" rel=\"nofollow noopener noreferrer\">conductive 3-ply thread</a></p><p style=\"margin-left: 20px;\">Adafruit, who distributes this thread, also sells <a href=\"https://www.adafruit.com/products/640\" rel=\"nofollow noopener noreferrer\">2-ply</a>, which is thinner. The one that is more all-purpose is the 3-ply, so that is required. Feel free to purchase the 2-ply to try out for yourself.</p><p>[x1] spool <a href=\"http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&amp;field-keywords=gutermann+all+purpose+thread&amp;rh=i%3Aaps%2Ck%3Agutermann+all+purpose+thread\" rel=\"nofollow noopener noreferrer\">polyester all-purpose thread</a> that matches your felt</p><p style=\"margin-left: 20px;\">Only one spool is necessary, but feel free to stock up on other colors or a small kit for variety. Gutermann is my favorite brand, so I've linked to them.</p>"
    },
    {
      "title": "Step 8: Blades and Rulers",
      "media": [
        {
          "src": "https://content.instructables.com/FQJ/1DSC/IMM974S1/FQJ1DSCIMM974S1.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Blades and Rulers"
        },
        {
          "src": "https://content.instructables.com/FXH/KQ9H/IMM974SA/FXHKQ9HIMM974SA.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Blades and Rulers"
        }
      ],
      "body": "[x1]  pair of scissors Ginghers are my favorite for sewing projects, but you can get a sharp pair for cheaper. Keep them dedicated to cutting fabric to keep them sharp. A small pair of scissors is very handy for when you need to get into smaller places but they are not necessary.[x1] pair of  craft scissors For cutting sticky back velcro, paper, and for all else that is not fabric.[x1]  seam ripper [x1] soft  measuring tape [x1] straight edge rulerA grid ruler is great for squaring lines but any straight ruler will do.",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/dp/B000UU6SR4/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\"> pair of scissors </a></p><p style=\"margin-left: 20px;\">Ginghers are my favorite for sewing projects, but you can get a sharp pair for cheaper. Keep them dedicated to cutting fabric to keep them sharp. A small pair of scissors is very handy for when you need to get into smaller places but they are not necessary.</p><p>[x1] pair of <a href=\"http://www.amazon.com/dp/B001BKHHGS/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\"> craft scissors </a></p><p style=\"margin-left: 20px;\">For cutting sticky back velcro, paper, and for all else that is not fabric.</p><p>[x1] <a href=\"http://www.amazon.com/dp/B005574EBO/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\"> seam ripper </a></p><p>[x1] soft <a href=\"http://www.amazon.com/dp/B000Y3CYTI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\"> measuring tape </a></p><p>[x1] <a href=\"http://www.amazon.com/dp/B000V59R8K/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">straight edge</a> ruler</p><p style=\"margin-left: 20px;\">A grid ruler is great for squaring lines but any straight ruler will do.</p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 9: Straight Pins",
      "media": [
        {
          "src": "https://content.instructables.com/FE8/P239/IMNOGPS8/FE8P239IMNOGPS8.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Straight Pins"
        }
      ],
      "body": "[x1] box of straight pinsThese are used to hold fabric in place while sewing or prototyping. These are extra fine pins and are made for delicate fabric, this means that they are sharp and thin, so they glide through fabric very easily. Even though they are made for delicate fabric, I think they are the best for general purpose sewing too.",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/dp/B001UAKKVI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">box of straight pins</a></p><p style=\"margin-left: 20px;\">These are used to hold fabric in place while sewing or prototyping. These are extra fine pins and are made for delicate fabric, this means that they are sharp and thin, so they glide through fabric very easily. Even though they are made for delicate fabric, I think they are the best for general purpose sewing too.</p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 10: Snaps",
      "media": [
        {
          "src": "https://content.instructables.com/F0K/63R5/IMM974UX/F0K63R5IMM974UX.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Snaps"
        }
      ],
      "body": "[x1]  30 pack of sew-on snaps",
      "html": "<p>[x1] <a href=\"https://www.sparkfun.com/products/11347\" rel=\"nofollow noopener noreferrer\"> 30 pack of sew-on snaps</a></p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 11: Fabric Glue",
      "media": [
        {
          "src": "https://content.instructables.com/FYA/S3YO/IMNOGPT6/FYAS3YOIMNOGPT6.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Fabric Glue"
        },
        {
          "src": "https://content.instructables.com/FYT/HQK8/IMNOGPT4/FYTHQK8IMNOGPT4.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Fabric Glue"
        }
      ],
      "body": "[x1] bottle of fabric glueThere are many kinds of fabric glue, depending on what kind of hold and what type of fabric you are applying it to. The one I link to Fabri-Tac, it's the most permanent fabric glue I know of that you can get in a fabric store. It's great and has a very strong hold.I also use Aleene's Ok to Wash. It can be machine washed, has a low odor and isn't as thick as Fabri-Tac which makes it more manageable. It's a lighter glue I use for securing knots.",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/dp/B00178MNFO/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">bottle of fabric glue</a></p><p style=\"margin-left: 20px;\">There are many kinds of fabric glue, depending on what kind of hold and what type of fabric you are applying it to. The one I link to Fabri-Tac, it's the most permanent fabric glue I know of that you can get in a fabric store. It's great and has a very strong hold.</p><p style=\"margin-left: 20px;\">I also use <a href=\"http://www.amazon.com/dp/B0011459QE/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">Aleene's Ok to Wash</a>. It can be machine washed, has a low odor and isn't as thick as Fabri-Tac which makes it more manageable. It's a lighter glue I use for securing knots.</p>"
    },
    {
      "title": "Step 12: Iron-on Conductive Fabric",
      "media": [
        {
          "src": "https://content.instructables.com/FVV/1342/IRXT0QVQ/FVV1342IRXT0QVQ.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Iron-on Conductive Fabric"
        }
      ],
      "body": "[x1] foot of  Shieldit Super conductive fabric with hot melt adhesive backing. Scroll down the page to find Shieldit Super.",
      "html": "<p>[x1] foot of <a href=\"http://www.lessemf.com/fabric4.html#1220\" rel=\"nofollow noopener noreferrer\"> Shieldit Super conductive fabric</a> with hot melt adhesive backing. </p><p style=\"margin-left: 20px;\">Scroll down the page to find Shieldit Super.</p>"
    },
    {
      "title": "Step 13: Resistive Plastic: Velostat",
      "media": [
        {
          "src": "https://content.instructables.com/FPI/OQLH/IRXT0R6N/FPIOQLHIRXT0R6N.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Resistive Plastic: Velostat"
        }
      ],
      "body": "[1x] foot of Velostat by 3M resistant plastic.Scroll down the page to find Velostat by 3M.",
      "html": "<p>[1x] foot of <a href=\"http://www.lessemf.com/plastic.html\" rel=\"nofollow noopener noreferrer\">Velostat by 3M resistant plastic</a>.</p><p style=\"margin-left: 20px;\">Scroll down the page to find Velostat by 3M.</p>"
    },
    {
      "title": "Step 14: Fabric Marker",
      "media": [
        {
          "src": "https://content.instructables.com/FGE/OMYU/IMNOGQ0V/FGEOMYUIMNOGQ0V.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Fabric Marker"
        }
      ],
      "body": "[x1] disappearing ink fabric markerThere are several marking tools for fabric out there, I also use tailor's chalk.",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/dp/B000YZ7OQO/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">disappearing ink fabric marker</a></p><p style=\"margin-left: 20px;\">There are several marking tools for fabric out there, I also use <a href=\"http://www.amazon.com/dp/B003WMHIDU/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">tailor's chalk</a>.</p>"
    },
    {
      "title": "Step 15: Ironing Supplies",
      "media": [
        {
          "src": "https://content.instructables.com/FBY/A268/IOEKKDTO/FBYA268IOEKKDTO.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Ironing Supplies"
        }
      ],
      "body": "[x1] iron[x1] ironing board",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/dp/B000M4D96G/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">iron</a></p><p>[x1] <a href=\"http://www.amazon.com/dp/B000W3ODZI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">ironing board</a></p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 16: Sticky Back Velcro",
      "media": [
        {
          "src": "https://content.instructables.com/FXQ/VQT5/IMNOGQ5L/FXQVQT5IMNOGQ5L.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Sticky Back Velcro"
        }
      ],
      "body": "[x1] pack of 24\" x 3/4\" of sticky back velcro tape. You can get any width from 5/8\" - 1\" if you would like to buy it from your local fabric store.",
      "html": "<p>[x1] pack of <a href=\"http://www.amazon.com/dp/B00N0W89Z8/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">24\" x 3/4\" of sticky back velcro tape</a>. </p><p style=\"margin-left: 20px;\">You can get any width from 5/8\" - 1\" if you would like to buy it from your local fabric store.</p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 17: Heat 'n' Bond",
      "media": [
        {
          "src": "https://content.instructables.com/FJQ/4HBB/IRXT44R0/FJQ4HBBIRXT44R0.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Heat 'n' Bond"
        }
      ],
      "body": "[x1] package of Heat 'n' BondThis comes in light-weight or heavy-weight. Either will work for this class. Heat 'n' Bond can also be purchased at your local fabric or craft store.",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/dp/B000XAMYXI/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">package of Heat 'n' Bond</a></p><p style=\"margin-left: 20px;\">This comes in light-weight or heavy-weight. Either will work for this class. Heat 'n' Bond can also be purchased at your local fabric or craft store. </p>"
    },
    {
      "title": "Step 18: 5mm LEDs",
      "media": [
        {
          "src": "https://content.instructables.com/F9W/043B/IMNOGQC3/F9W043BIMNOGQC3.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "5mm LEDs"
        }
      ],
      "body": "[x1] assorted pack of  5mm LEDsYou technically just need one, but the rest are good for experimentation, plus they are affordable enough that getting a pack of multiples makes more sense in the long run. You will use these down the road if you build more circuits. If you want to purchase them individually, you can do so  here.",
      "html": "<p>[x1] assorted pack of <a href=\"https://www.sparkfun.com/products/12062\" rel=\"nofollow noopener noreferrer\"> 5mm LEDs</a></p><p style=\"margin-left: 20px;\">You technically just need one, but the rest are good for experimentation, plus they are affordable enough that getting a pack of multiples makes more sense in the long run. You will use these down the road if you build more circuits. If you want to purchase them individually, you can do so <a href=\"https://www.sparkfun.com/products/9590\" rel=\"nofollow noopener noreferrer\"> here</a>. </p>"
    },
    {
      "title": "Step 19: Resistor Kit",
      "media": [
        {
          "src": "https://content.instructables.com/F3X/0CBK/IMNOGQOP/F3X0CBKIMNOGQOP.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Resistor Kit"
        }
      ],
      "body": "[x1] resistor kit",
      "html": "<p>[x1] <a href=\"https://www.sparkfun.com/products/10969\" rel=\"nofollow noopener noreferrer\">resistor kit</a></p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 20: Multimeter",
      "media": [
        {
          "src": "https://content.instructables.com/FQG/KWND/IMM97589/FQGKWNDIMM97589.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Multimeter"
        }
      ],
      "body": "[x1] multimeterAn essential tool for circuit building! It can read how much power a battery has left if, you have made good electrical connections, and more.",
      "html": "<p>[x1] <a href=\"https://www.sparkfun.com/products/12966\" rel=\"nofollow noopener noreferrer\">multimeter</a></p><p style=\"margin-left: 20px;\">An essential tool for circuit building! It can read how much power a battery has left if, you have made good electrical connections, and more. </p>"
    },
    {
      "title": "Step 21: Power",
      "media": [
        {
          "src": "https://content.instructables.com/F1A/QKRW/IMM975A8/F1AQKRWIMM975A8.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Power"
        },
        {
          "src": "https://content.instructables.com/F9A/93AG/IMM975A9/F9A93AGIMM975A9.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Power"
        }
      ],
      "body": "[x2]  sewable coin cell holder[x2]  2032 coin cell batteries[x1] 1000 mAh Polymer Lithium Ion (LiPo) battery[x1] USB microB cable",
      "html": "<p>[x2]  <a href=\"https://www.sparkfun.com/products/8822\" rel=\"nofollow noopener noreferrer\">sewable coin cell holder</a><a href=\"https://www.sparkfun.com/products/8822\" rel=\"nofollow noopener noreferrer\"></a></p><p>[x2] <a href=\"http://www.amazon.com/Energizer-Electronic-Batteries-batteries-Lithium/dp/B0002DSVS8/ref=sr_1_7?ie=UTF8&amp;qid=1453232611&amp;sr=8-7&amp;keywords=coin+cell+battery\" rel=\"nofollow noopener noreferrer\"> 2032 coin cell batteries</a></p><p>[x1] <a href=\"https://www.sparkfun.com/products/339\" rel=\"nofollow noopener noreferrer\">1000 mAh Polymer Lithium Ion</a> (LiPo) battery</p><p>[x1] <a href=\"https://www.sparkfun.com/products/10215\" rel=\"nofollow noopener noreferrer\">USB microB cable</a></p>"
    },
    {
      "title": "Step 22: Microcontroller",
      "media": [
        {
          "src": "https://content.instructables.com/FAK/M8TK/IMM975E8/FAKM8TKIMM975E8.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Microcontroller"
        }
      ],
      "body": "[x1] LilyPad USB microcontrollerThe LilyPad USB is sewable and great for beginners. Take a look at the Introducing the Microcontroller lesson if you would like to learn more about this board and what else is available before purchasing one.",
      "html": "<p>[x1] <a href=\"https://www.sparkfun.com/products/12049\" rel=\"nofollow noopener noreferrer\">LilyPad USB</a> microcontroller</p><p style=\"margin-left: 20px;\">The LilyPad USB is sewable and great for beginners. Take a look at the Introducing the Microcontroller lesson if you would like to learn more about this board and what else is available before purchasing one.</p>"
    },
    {
      "title": "Step 23: Vibe Board",
      "media": [
        {
          "src": "https://content.instructables.com/FP7/WM6Q/IOVPNXLH/FP7WM6QIOVPNXLH.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Vibe Board"
        }
      ],
      "body": "[1x] vibe board",
      "html": "<p>[1x] <a href=\"https://www.sparkfun.com/products/11008\" rel=\"nofollow noopener noreferrer\">vibe board</a></p>"
    },
    {
      "title": "Step 24: Sewable LEDs",
      "media": [
        {
          "src": "https://content.instructables.com/FFR/6RXE/IOFZAB8P/FFR6RXEIOFZAB8P.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Sewable LEDs"
        }
      ],
      "body": "[x1] 5 piece packs of LilyPad LEDsThese LEDs come in several colors: Pink, Yellow, Blue, Green, White, Red and Purple.",
      "html": "<p>[x1] <a href=\"https://www.sparkfun.com/products/10045\" rel=\"nofollow noopener noreferrer\">5 piece packs of LilyPad LEDs</a></p><p style=\"margin-left: 20px;\">These LEDs come in several colors: Pink, Yellow, Blue, Green, White, Red and Purple. </p><p style=\"margin-left: 20px;\"></p><p style=\"margin-left: 20px;\"></p>"
    },
    {
      "title": "Step 25: Flex Sensor",
      "media": [
        {
          "src": "https://content.instructables.com/F0H/UN9K/IRXSZQ5W/F0HUN9KIRXSZQ5W.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Flex Sensor"
        }
      ],
      "body": "[x1] 4.5\" Spectra Symbol flex sensorThis can be found here or sometimes on sale through Amazon which is linked above.",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/dp/B005T8743E/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">4.5\" Spectra Symbol flex sensor</a></p><p>This can be found <a href=\"https://www.sparkfun.com/products/8606\" rel=\"nofollow noopener noreferrer\">here</a> or sometimes on sale through Amazon which is linked above.</p>"
    },
    {
      "title": "Step 26: Needle-nose Plier",
      "media": [
        {
          "src": "https://content.instructables.com/FX8/N6NM/IRXT0QUZ/FX8N6NMIRXT0QUZ.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Needle-nose Plier"
        }
      ],
      "body": "[x1] needle-nose plierRounded nose pliers are preferred but any small plier will do the trick, this is for bending small gauges of wire.",
      "html": "<p>[x1] <a href=\"http://www.amazon.com/Stanley-84-096-5-Inch-Needle-Plier/dp/B0001IW50Y/ref=sr_1_2?s=power-hand-tools&amp;ie=UTF8&amp;qid=1459187454&amp;sr=1-2&amp;keywords=needle+nose+pliers\" rel=\"nofollow noopener noreferrer\">needle-nose plier</a></p><p style=\"margin-left: 20px;\">Rounded nose pliers are preferred but any small plier will do the trick, this is for bending small gauges of wire.</p>"
    },
    {
      "title": "Step 27: Alligator Leads",
      "media": [
        {
          "src": "https://content.instructables.com/FOT/MLFU/IMM975LX/FOTMLFUIMM975LX.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Alligator Leads"
        }
      ],
      "body": "[x1]  12 pack of alligator leads[x1] 12 pack of short alligator leadsThese are used to clip circuits together when using a sewable microcontroller.",
      "html": "<p>[x1] <a href=\"https://www.adafruit.com/products/1008\" rel=\"nofollow noopener noreferrer\"> 12 pack of alligator leads</a></p><p>[x1] <a href=\"https://www.adafruit.com/products/1592\" rel=\"nofollow noopener noreferrer\">12 pack of short alligator leads</a></p><p style=\"margin-left: 20px;\">These are used to clip circuits together when using a sewable microcontroller.</p>"
    },
    {
      "title": "Step 28: Computer",
      "media": [
        {
          "src": "https://content.instructables.com/FD3/DAZ0/IOG1G35P/FD3DAZ0IOG1G35P.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Computer"
        }
      ],
      "body": "You will be writing programs and uploading them to the microcontroller via a computer's USB port. If you don't already have one, find a computer that you can download software onto and can have access to for the duration of the class.",
      "html": "<p>You will be writing programs and uploading them to the microcontroller via a computer's USB port. If you don't already have one, find a computer that you can download software onto and can have access to for the duration of the class.</p>"
    },
    {
      "title": "Step 29: Light Diffusing Materials",
      "media": [
        {
          "src": "https://content.instructables.com/FIP/C0N6/IRXT42VK/FIPC0N6IRXT42VK.jpg?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Light Diffusing Materials"
        }
      ],
      "body": "These can be thought of as optional right now since I go over techniques that use either hot glue and parchment or polyester filling to diffuse an LED with. Feel free to hold off on these until you get to the lesson where you can choose or stock up on them now. [x1] mini glue gun + glue sticks[small] piece of parchment paper[small] piece of poly-fil",
      "html": "<p>These can be thought of as optional right now since I go over techniques that use either hot glue and parchment or polyester filling to diffuse an LED with. Feel free to hold off on these until you get to the lesson where you can choose or stock up on them now. </p><p>[x1] <a href=\"http://www.amazon.com/dp/B001AQRLM8/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">mini glue gun + glue sticks</a></p><p>[small] piece of <a href=\"http://www.amazon.com/dp/B0166SPEL4/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">parchment paper</a></p><p>[small] piece of <a href=\"http://www.amazon.com/dp/B000YZ7G44/?tag=instructabl09-20\" rel=\"nofollow noopener noreferrer\">poly-fil</a></p>"
    },
    {
      "title": "Step 30: Materials Resources",
      "media": [
        {
          "src": "https://content.instructables.com/F2X/0NCV/J3OPPLRU/F2X0NCVJ3OPPLRU.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Materials Resources"
        }
      ],
      "body": "BooksFashioning TechnologyMake: Wearable ElectronicsSew ElectricGetting Started with Adafruit FLORACond. + Resistive FabricsLess EMFSheildexPlug and WearTextile PerfboardsMindsets - sample packEeonyxCond. + Resistive Thread and YarnLamé LifesaverShieldex ThreadYarn and FillerKarl Grimm Copper ThreadSold by Plusea (Hannah Perner Wilson)AdafruitSparkfunPlug and WearCond. + Resistive Trims, Ribbons, and ElasticOhmatexOffrayConductive RubberPrefab Sensors, Buttons, and InterfacesPlug and WearFibretronicsSensing TexPlusea's Etsy StoreElectronic Components and DIY KitsJamecoAdafruit - great tutorialsSparkfun - great tutorialsDigikeyAll ElectronicsMouserPololu - particularly good for servos and roboticsServoCity - everything servo + gearmotors and stepper motorsMiga Motors - muscle wire actuatorsLight UpFiber Optic ProductsCool Neon - EL wire and accessoriesFabric Paints and PigmentsBare Conductive PaintCopper CuPro-Cote Paint (scroll down)Y-Shield - carbon-based resistive paintHardware That is Small, Powerful and/or Designed for WearablesLilyPad ArduinoFloraSquareWearTinyDuinoTeensyArduino Mini ProeTextile and Wearable Tech Tutorial/Project WebsitesKobakant - the ultimate DIY eTextile and wearable electronics sourceFashioning Technology - get lots of inspiration from checking out projects",
      "html": "<p><strong>Books</strong></p><p><a href=\"http://www.amazon.com/Fashioning-Technology-Intro-Crafting-Projects/dp/0596514379\" rel=\"nofollow noopener noreferrer\">Fashioning Technology</a></p><p><a href=\"http://www.amazon.com/gp/product/1449336515/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=1944687462&amp;pf_rd_s=lpo-top-stripe-1&amp;pf_rd_t=201&amp;pf_rd_i=0596514379&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_r=0A2CNHM02Z72RKED0H41\" rel=\"nofollow noopener noreferrer\">Make: Wearable Electronics</a></p><p><a href=\"http://www.amazon.com/Sew-Electric-Leah-Buechley/dp/0989795608/ref=pd_bxgy_14_img_3?ie=UTF8&amp;refRID=0DQ4QR9Q59ED8TB4EY1C\" rel=\"nofollow noopener noreferrer\">Sew Electric</a></p><p><a href=\"http://www.amazon.com/Getting-Started-Adafruit-FLORA-Arduino-Compatible/dp/1457183226/ref=pd_sim_14_3?ie=UTF8&amp;dpID=51jd2rK8n2L&amp;dpSrc=sims&amp;preST=_AC_UL480_SR312%2C480_&amp;refRID=0QQGD39WNYZ5J9F6DWCZ\" rel=\"nofollow noopener noreferrer\">Getting Started with Adafruit FLORA</a></p><p><strong>Cond. + Resistive Fabrics</strong></p><p><a href=\"http://lessemf.com/fabric.html\" rel=\"nofollow noopener noreferrer\">Less EMF</a></p><p><a href=\"http://www.shieldextrading.net/woven_fabrics.html\" rel=\"nofollow noopener noreferrer\">Sheildex</a></p><p><a href=\"http://www.plugandwear.com/default.asp?mod=cat&amp;cat_id=89\" rel=\"nofollow noopener noreferrer\">Plug and Wear</a></p><p><a href=\"http://www.plugandwear.com/default.asp?mod=cat&amp;cat_id=89,104\" rel=\"nofollow noopener noreferrer\">Textile Perfboards</a></p><p><a href=\"http://www.mindsetsonline.co.uk/Catalogue/ProductDetail/electrotextiles-sample-pack?productID=8fe0a253-ee0a-4ad9-877b-04c7f3b68835&amp;catalogueLevelItemID=dd45e5bd-734f-408a-a80d-ba436acf6563\" rel=\"nofollow noopener noreferrer\">Mindsets - sample pack</a></p><p><a href=\"http://www.eeonyx.com/products.php\" rel=\"nofollow noopener noreferrer\">Eeonyx</a></p><p><strong>Cond. + Resistive Thread and Yarn</strong></p><p><a href=\"http://members.shaw.ca/ubik/thread/order.html\" rel=\"nofollow noopener noreferrer\">Lamé Lifesaver</a></p><p><a href=\"http://www.shieldextrading.net/sewing_products.html\" rel=\"nofollow noopener noreferrer\">Shieldex Thread</a></p><p><a href=\"http://www.shieldextrading.net/yarn_and_filler.html\" rel=\"nofollow noopener noreferrer\">Yarn and Filler</a></p><p><a href=\"http://www.karl-grimm.com/navi.swf\" rel=\"nofollow noopener noreferrer\">Karl Grimm Copper Thread</a></p><p><a href=\"https://www.etsy.com/listing/114198338/solderable-conductive-thread-thinner\" rel=\"nofollow noopener noreferrer\">Sold by Plusea</a> (Hannah Perner Wilson)</p><p><a href=\"https://www.adafruit.com/search?q=conductive+thread&amp;b=1\" rel=\"nofollow noopener noreferrer\">Adafruit</a></p><p><a href=\"https://www.sparkfun.com/search/results?term=conductive+thread\" rel=\"nofollow noopener noreferrer\">Sparkfun</a></p><p><a href=\"http://www.plugandwear.com/default.asp?mod=product&amp;cat_id=105&amp;product_id=235\" rel=\"nofollow noopener noreferrer\">Plug and Wear</a></p><p><strong>Cond. + Resistive Trims, Ribbons, and Elastic</strong></p><p><a href=\"http://www.ohmatex.dk/index.php/products/tailored-products/textile-cabling/\" rel=\"nofollow noopener noreferrer\">Ohmatex</a></p><p><a href=\"http://webbing.osnf.com/viewitems/specialty-elastic/specialty-tape?bc=100|1003|1037|1040|1039|1041&amp;forward=1\" rel=\"nofollow noopener noreferrer\">Offray</a></p><p><a href=\"https://www.adafruit.com/products/519\" rel=\"nofollow noopener noreferrer\">Conductive Rubber</a></p><p><strong>Prefab Sensors, Buttons, and Interfaces</strong></p><p><a href=\"http://www.plugandwear.com/default.asp?mod=cat&amp;cat_id=86\" rel=\"nofollow noopener noreferrer\">Plug and Wear</a></p><p><a href=\"http://fibretronic.com/\" rel=\"nofollow noopener noreferrer\">Fibretronics</a></p><p><a href=\"http://sensingtex.com/\" rel=\"nofollow noopener noreferrer\">Sensing Tex</a></p><p><a href=\"https://www.etsy.com/shop/Plusea\" rel=\"nofollow noopener noreferrer\">Plusea's Etsy Store</a></p><p><strong>Electronic Components and DIY Kits</strong></p><p><a href=\"http://www.jameco.com/webapp/wcs/stores/servlet/StoreCatalogDisplay?storeId=10001&amp;catalogId=10001&amp;langId=-1\" rel=\"nofollow noopener noreferrer\">Jameco</a></p><p><a href=\"https://www.adafruit.com/\" rel=\"nofollow noopener noreferrer\">Adafruit</a> - great tutorials</p><p><a href=\"https://www.sparkfun.com\" rel=\"nofollow noopener noreferrer\">Sparkfun</a> - great tutorials</p><p><a href=\"http://www.digikey.com/?&amp;WT.srch=1\" rel=\"nofollow noopener noreferrer\">Digikey</a></p><p><a href=\"http://www.allelectronics.com/\" rel=\"nofollow noopener noreferrer\">All Electronics</a></p><p><a href=\"http://www.mouser.com/?gclid=CjwKEAiAy7SzBRD_lv7quOnr6XUSJAAOLkW6K7cnr4-sL23Lc6mxJex_mbzXj2PQFVBMcBPoK2aKjhoCxGbw_wcB\" rel=\"nofollow noopener noreferrer\">Mouser</a></p><p><a href=\"https://www.pololu.com/\" rel=\"nofollow noopener noreferrer\">Pololu</a> - particularly good for servos and robotics</p><p><a href=\"https://www.servocity.com/\" rel=\"nofollow noopener noreferrer\">ServoCity</a> - everything servo + gearmotors and stepper motors</p><p><a href=\"http://www.migamotors.com/\" rel=\"nofollow noopener noreferrer\">Miga Motors</a> - muscle wire actuators</p><p><strong>Light Up</strong></p><p><a href=\"http://www.fiberopticproducts.com/\" rel=\"nofollow noopener noreferrer\">Fiber Optic Products</a></p><p><a href=\"http://www.coolneon.com/\" rel=\"nofollow noopener noreferrer\">Cool Neon</a> - EL wire and accessories</p><p><strong>Fabric Paints and Pigments</strong></p><p><a href=\"http://www.bareconductive.com/shop/\" rel=\"nofollow noopener noreferrer\">Bare Conductive Paint</a></p><p><a href=\"http://lessemf.com/paint.html\" rel=\"nofollow noopener noreferrer\">Copper CuPro-Cote Paint</a> (scroll down)</p><p><a href=\"http://lessemf.com/paint.html\" rel=\"nofollow noopener noreferrer\">Y-Shield</a> - carbon-based resistive paint</p><p><strong style=\"background-color: initial;\">Hardware That is Small, Powerful and/or Designed for Wearables</strong></p><p><a href=\"http://lilypadarduino.org/\" rel=\"nofollow noopener noreferrer\">LilyPad Arduino</a></p><p><a href=\"https://www.adafruit.com/flora\" rel=\"nofollow noopener noreferrer\">Flora</a></p><p><a href=\"https://www.adafruit.com/flora\" rel=\"nofollow noopener noreferrer\">SquareWear</a></p><p><a href=\"https://www.tiny-circuits.com/products/tiny-duino.html\" rel=\"nofollow noopener noreferrer\">TinyDuino</a></p><p><a href=\"https://www.pjrc.com/teensy/\" rel=\"nofollow noopener noreferrer\">Teensy</a></p><p><a href=\"https://www.arduino.cc/en/Main/ArduinoBoardMini\" rel=\"nofollow noopener noreferrer\">Arduino Mini Pro</a></p><p><strong>eTextile and Wearable Tech Tutorial/Project Websites</strong></p><p><a href=\"http://www.kobakant.at/DIY/\" rel=\"nofollow noopener noreferrer\">Kobakant</a> - the ultimate DIY eTextile and wearable electronics source</p><p><a href=\"http://fashioningtech.com/\" rel=\"nofollow noopener noreferrer\">Fashioning Technology</a> - get lots of inspiration from checking out projects</p>"
    }
  ],
  "author": {
    "name": "push_reset",
    "image": "https://content.instructables.com/FKW/IEWZ/I5S2ESHB/FKWIEWZI5S2ESHB.jpg?auto=webp&crop=1%3A1&frame=1&width=130",
    "url": "https://www.instructables.com/member/push_reset/"
  }
},
{
  "type": "project",
  "url": "https://www.instructables.com/Skimboard-Game-Interface",
  "title": "Skimboard Game Interface",
  "isFeatured": false,
  "numberOfViews": 5610,
  "numberOfLikes": 5,
  "numberOfComments": 1,
  "categories": [
    "Circuits",
    "Remote Control"
  ],
  "steps": [
    {
      "title": "Introduction: Skimboard Game Interface",
      "media": [
        {
          "src": "https://content.instructables.com/F1Z/8UIK/GKS0U5IV/F1Z8UIKGKS0U5IV.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Skimboard Game Interface"
        },
        {
          "src": "https://content.instructables.com/FOT/VE48/GKS0U5HV/FOTVE48GKS0U5HV.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Skimboard Game Interface"
        },
        {
          "src": "https://content.instructables.com/FAZ/XIPZ/GKS0U5J9/FAZXIPZGKS0U5J9.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Skimboard Game Interface"
        }
      ],
      "body": "Turn a regular skimboard into a game interface so that you can physically surf virtual worlds!\nThe skimboard interface is a custom interface built for the game Surf RMB City by the artist Cao Fei, who also designed the skimboard graphics.\nThis Instructable will show you how to build the interface and program it to emulate left, right and jump key presses. With a little more programming skills you can also make it do much more.\nThe skimboard interface is made up of six handmade textile pressure sensors that are embedded within layers of felt mounted beneath a commercial skimboard. These pressure sensors can detect the weight and position of somebody standing on the skimboard. All six sensors are connected to a small programmable HID (Human Interface Device) module called the Teensy 2.0. The Teensy is programmed to read the sensor data in order to detect whether somebody is standing on the skimboard and interpret if they are leaning left or right. This information is then mapped to different keyboard strokes in order that the skimboard interface can control the game.\nMore pictures of the installation at the Museum of the Moving Image, NY:\n>> http://rmbcity.com/2011/01/surf-in-rmb-city-2/Video from work in progress\n(Unfortunately i don't have a video of the final installation)&lt;br /&gt;",
      "html": "Turn a regular skimboard into a game interface so that you can physically surf virtual worlds!<br><br>\nThe skimboard interface is a custom interface built for the game Surf RMB City by the artist <a href=\"http://www.caofei.com\" rel=\"nofollow noopener noreferrer\">Cao Fei</a>, who also designed the skimboard graphics.<br><br>\nThis Instructable will show you how to build the interface and program it to emulate left, right and jump key presses. With a little more programming skills you can also make it do much more.<br><br>\nThe skimboard interface is made up of six handmade <a href=\"https://www.instructables.com/id/Pressure-Sensor-Matrix/\" rel=\"noopener noreferrer\">textile pressure sensors</a> that are embedded within layers of felt mounted beneath a commercial skimboard. These pressure sensors can detect the weight and position of somebody standing on the skimboard. All six sensors are connected to a small programmable HID (Human Interface Device) module called the Teensy 2.0. The Teensy is programmed to read the sensor data in order to detect whether somebody is standing on the skimboard and interpret if they are leaning left or right. This information is then mapped to different keyboard strokes in order that the skimboard interface can control the game.<br><br>\nMore pictures of the installation at the Museum of the Moving Image, NY:<br>\n&gt;&gt; http://rmbcity.com/2011/01/surf-in-rmb-city-2/<br><br><strong>Video from work in progress</strong><br>\n(Unfortunately i don't have a video of the final installation)<br><div class=\"media_embed\"><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"390\" src=\"http://www.youtube.com/embed/YDmgvolFmfE\" title=\"YouTube video player\" width=\"640\">&lt;br /&gt;\n\t</iframe></div><br><br>"
    },
    {
      "title": "Step 1: Materials, Tools and Downloads",
      "media": [
        {
          "src": "https://content.instructables.com/F4W/70CS/GKS0U5KZ/F4W70CSGKS0U5KZ.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Materials, Tools and Downloads"
        }
      ],
      "body": "Materials\n• Skimboard: http://www.amazon.com/MBS-95541-35-Wood-Skimboard-35-Inch/dp/B00333FK56/ref=sr_1_9?ie=UTF8&qid=1292697655&sr=8\n• Griptape (sandpaper with adhesive backing used for skateboards) >> http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=griptape&x=0&y=0\n• ¼ inch felt >> http://www.sutherlandfelt.com\n• Teensy 2.0 >> http://www.adafruit.com/index.php?main_page=product_info&cPath=16&products_id=199\n• 234/34 4 ply Conductive sewing thread >> http://www.shieldextrading.net/sewing_products.html\n• Conductive Velcro >> http://lessemf.com/fabric.html\n• EeonTex piezo-resistive fabric >> http://eeonyx.com/\n• Fusible interfacing (iron-on fabric heat glue) >> local fabric store\n• Black button thread (thick, strong thread) >> local fabric store\n• Superglue >> local hardware store\n• Studio tack (double sided sticky tape) >> local craft store\n• Wire >> local hardware store or RadioshackTools\n• Mini USB cable (to connect to Teensy) >> online or Radioshack\n• Computer with Arduino, Teesyduino library and Teensy Loader software installed (see downloads)\n• Lasercutter (to cut the griptape design)\n• Sharp fabric scissors (for cutting thick felt) >> local fabric store\n• Soldering iron >> online for Radioshack\n• Multimeter >> online for Radioshack\n• Wire strippers and cutters >> Radioshack\n• Iron (for fusing the interfacing) >> borrow from somebody\n• Large sheet of paper and markers >> local craft store\n• Hot glue gun >> local hardware store\n• Sewing needles >> local fabric storeDownloads\n• Arduino (application) >> http://arduino.cc/en/Main/Software\n• Teensy Loader (application) >> http://www.pjrc.com/teensy/loader.html\n• Teensyduino (software add-on) >> http://www.pjrc.com/teensy/td_download.html\n• Teensy game code (by Friedrich Kirschner, ZIP) >> http://www.plusea.at/downloads/skimboard-game.zip\n• Teensy test code (ZIP) >> http://www.plusea.at/downloads/skimboard-test.zip\n• Teensy pins for Arduino (JPG) >> http://www.flickr.com/photos/plusea/4895291504/\n• Skimboard design (by Cao Fei, PDF) >> http://www.plusea.at/downloads/skimboard-design.pdf\n• Skimboard griptape cut-file (PDF) >> http://www.plusea.at/downloads/skimboard-cut-file.pdf\n• Skimboard buildup (PDF) >> http://www.plusea.at/downloads/skimboard-cut-file.pdf\n• Sensor placement layout (PDF) >> http://www.plusea.at/downloads/skimboard-sensors.pdf",
      "html": "<strong>Materials</strong><br>\n• Skimboard: http://www.amazon.com/MBS-95541-35-Wood-Skimboard-35-Inch/dp/B00333FK56/ref=sr_1_9?ie=UTF8&amp;qid=1292697655&amp;sr=8<br>\n• Griptape (sandpaper with adhesive backing used for skateboards) &gt;&gt; http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&amp;field-keywords=griptape&amp;x=0&amp;y=0<br>\n• ¼ inch felt &gt;&gt; http://www.sutherlandfelt.com<br>\n• Teensy 2.0 &gt;&gt; http://www.adafruit.com/index.php?main_page=product_info&amp;cPath=16&amp;products_id=199<br>\n• 234/34 4 ply Conductive sewing thread &gt;&gt; http://www.shieldextrading.net/sewing_products.html<br>\n• Conductive Velcro &gt;&gt; http://lessemf.com/fabric.html<br>\n• EeonTex piezo-resistive fabric &gt;&gt; http://eeonyx.com/<br>\n• Fusible interfacing (iron-on fabric heat glue) &gt;&gt; local fabric store<br>\n• Black button thread (thick, strong thread) &gt;&gt; local fabric store<br>\n• Superglue &gt;&gt; local hardware store<br>\n• Studio tack (double sided sticky tape) &gt;&gt; local craft store<br>\n• Wire &gt;&gt; local hardware store or Radioshack<br><br><strong>Tools</strong><br>\n• Mini USB cable (to connect to Teensy) &gt;&gt; online or Radioshack<br>\n• Computer with Arduino, Teesyduino library and Teensy Loader software installed (see downloads)<br>\n• Lasercutter (to cut the griptape design)<br>\n• Sharp fabric scissors (for cutting thick felt) &gt;&gt; local fabric store<br>\n• Soldering iron &gt;&gt; online for Radioshack<br>\n• Multimeter &gt;&gt; online for Radioshack<br>\n• Wire strippers and cutters &gt;&gt; Radioshack<br>\n• Iron (for fusing the interfacing) &gt;&gt; borrow from somebody<br>\n• Large sheet of paper and markers &gt;&gt; local craft store<br>\n• Hot glue gun &gt;&gt; local hardware store<br>\n• Sewing needles &gt;&gt; local fabric store<br><br><strong>Downloads</strong><br>\n• Arduino (application) &gt;&gt; http://arduino.cc/en/Main/Software<br>\n• Teensy Loader (application) &gt;&gt; http://www.pjrc.com/teensy/loader.html<br>\n• Teensyduino (software add-on) &gt;&gt; http://www.pjrc.com/teensy/td_download.html<br>\n• Teensy game code (by Friedrich Kirschner, ZIP) &gt;&gt; http://www.plusea.at/downloads/skimboard-game.zip<br>\n• Teensy test code (ZIP) &gt;&gt; http://www.plusea.at/downloads/skimboard-test.zip<br>\n• Teensy pins for Arduino (JPG) &gt;&gt; http://www.flickr.com/photos/plusea/4895291504/<br>\n• Skimboard design (by Cao Fei, PDF) &gt;&gt; http://www.plusea.at/downloads/skimboard-design.pdf<br>\n• Skimboard griptape cut-file (PDF) &gt;&gt; http://www.plusea.at/downloads/skimboard-cut-file.pdf<br>\n• Skimboard buildup (PDF) &gt;&gt; http://www.plusea.at/downloads/skimboard-cut-file.pdf<br>\n• Sensor placement layout (PDF) &gt;&gt; http://www.plusea.at/downloads/skimboard-sensors.pdf<br><br>"
    },
    {
      "title": "Step 2: Lasercut the Skimboard Design",
      "media": [
        {
          "src": "https://content.instructables.com/FEN/4GLH/GKS0U5J7/FEN4GLHGKS0U5J7.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/FLV/WI47/GKS0U5KY/FLVWI47GKS0U5KY.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/FHA/WFI6/GKS0U5KX/FHAWFI6GKS0U5KX.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/FWQ/QCVX/GKS0U5JY/FWQQCVXGKS0U5JY.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/F4W/70CS/GKS0U5KZ/F4W70CSGKS0U5KZ.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/F0Y/2R9B/GKS0U5L1/F0Y2R9BGKS0U5L1.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/FTF/24D0/GKS0U5KU/FTF24D0GKS0U5KU.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/F8X/6PIZ/GKS0U5KS/F8X6PIZGKS0U5KS.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/F2Z/4V80/GKS0U5KQ/F2Z4V80GKS0U5KQ.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/FPQ/YI9U/GKS0U5KM/FPQYI9UGKS0U5KM.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/F4A/USPG/GKS0U5KF/F4AUSPGGKS0U5KF.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        },
        {
          "src": "https://content.instructables.com/FU4/4ABE/GKS0U5J8/FU44ABEGKS0U5J8.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Lasercut the Skimboard Design"
        }
      ],
      "body": "The skimboard design by Cao Fei is cut out of griptape, a sandpaper with an adhesive backing used commonly on skateboards. The griptape can be cut with a lasercutter from the skimboard-cut-file.pdf\nDepending on the lasercutter the power and speed settings will be different. I was able to use speed:50, power:30. The sandpaper side should be facing down so that the cutting happens on the adhesive backing. Because of this you need to be sure to mirror the design-file so that the cut pieces are oriented the right way when facing upwards.\nOnce the design has been cut out, carefully separate the actual pieces from the rests. Layout the design on the skimboard before peeling off the adhesive backing to make sure you have all the pieces and that they all fit together. In order to align the pieces with the original design you can print a 1:1 scale copy of the skimbaord-design.pdf, but you can also estimate their placement as it is not crucial to functionality.\nOnce you have the design layed out, peel off the adhesive backing from the pieces one at a time and stick them down one by one. Adhere fills before outlines. When the griptape is all in place use superglue around the edges as well as on top of intricate details to ensure that it is firmly bound to the surface of the skimboard. The wet superglue will not look very good, but as soon as it dries it will become nearly invisible.",
      "html": "The skimboard design by Cao Fei is cut out of griptape, a sandpaper with an adhesive backing used commonly on skateboards. The griptape can be cut with a lasercutter from the skimboard-cut-file.pdf<br><br>\nDepending on the lasercutter the power and speed settings will be different. I was able to use speed:50, power:30. The sandpaper side should be facing down so that the cutting happens on the adhesive backing. Because of this you need to be sure to mirror the design-file so that the cut pieces are oriented the right way when facing upwards.<br><br>\nOnce the design has been cut out, carefully separate the actual pieces from the rests. Layout the design on the skimboard before peeling off the adhesive backing to make sure you have all the pieces and that they all fit together. In order to align the pieces with the original design you can print a 1:1 scale copy of the skimbaord-design.pdf, but you can also estimate their placement as it is not crucial to functionality.<br><br>\nOnce you have the design layed out, peel off the adhesive backing from the pieces one at a time and stick them down one by one. Adhere fills before outlines. When the griptape is all in place use superglue around the edges as well as on top of intricate details to ensure that it is firmly bound to the surface of the skimboard. The wet superglue will not look very good, but as soon as it dries it will become nearly invisible.<br><br>"
    },
    {
      "title": "Step 3: Prepare the Felt Pedestal",
      "media": [
        {
          "src": "https://content.instructables.com/F6Y/RRVM/GKS0U5HR/F6YRRVMGKS0U5HR.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Prepare the Felt Pedestal"
        },
        {
          "src": "https://content.instructables.com/FZM/P74N/GKS0U5JE/FZMP74NGKS0U5JE.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Prepare the Felt Pedestal"
        },
        {
          "src": "https://content.instructables.com/FTT/4D9H/GKS0U5KV/FTT4D9HGKS0U5KV.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Prepare the Felt Pedestal"
        }
      ],
      "body": "Because the wooden skimboard is slightly curved, especially at the tip, it is necessary to build up padding under the curvature in order for the skimboard to stand sturdily on the ground and not tip or flip when people stand on the edge. Five ¼ inch thick layers of felt buildup should be sufficient to support the tip of the skimboard. In addition to the buildup layers you’ll need to cut two full skimboard size pieces of felt as illustrated in the illustration.\nCut out all felt layers with a pair of sharp scissors. Stitch together the buildup layers using a strong black thread (the picture actually shows white thread, but this is harder to keep invisible).\nBefore continuing to stitch the buildup layers to the top layer and finally all the layers together you need to embed the Teensy and the fabric pressure sensors, so wait until the very last step to sew everything together.",
      "html": "Because the wooden skimboard is slightly curved, especially at the tip, it is necessary to build up padding under the curvature in order for the skimboard to stand sturdily on the ground and not tip or flip when people stand on the edge. Five ¼ inch thick layers of felt buildup should be sufficient to support the tip of the skimboard. In addition to the buildup layers you’ll need to cut two full skimboard size pieces of felt as illustrated in the illustration.<br><br>\nCut out all felt layers with a pair of sharp scissors. Stitch together the buildup layers using a strong black thread (the picture actually shows white thread, but this is harder to keep invisible).<br><br>\nBefore continuing to stitch the buildup layers to the top layer and finally all the layers together you need to embed the Teensy and the fabric pressure sensors, so wait until the very last step to sew everything together.<br><br>"
    },
    {
      "title": "Step 4: Solder Wires to Teensy",
      "media": [
        {
          "src": "https://content.instructables.com/FHN/6CBM/GKS0U5HU/FHN6CBMGKS0U5HU.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Solder Wires to Teensy"
        }
      ],
      "body": "In order to prepare the Teensy to be integrated in the felt pedestal and be connected to the fabric sensors we need to solder wires to select pins and make loops at the ends of these wires so that we can sew to them. Sewable wire loops are a common E-Textile (Electronic Textiles) method for connecting hard and soft components.\nSince we have six analog sensors, we need to solder six wires to six analog pins and one wire to GND for the common ground. We chose to connect to analog pins: A0, A1, A2, A3, A4, A9 and the top left GND pin. Cut a roughly 10cm long piece of multi-stranded wire (this kind of wire is more flexible than a single core wire) and strip both ends of the isolation. Solder one end to the Teensy and turn the other into a pea-size loop. Figure 7 shows close-ups of this process. Soldering the twists of the loop to keep them from unraveling is optional. I prefer not to solder because the solder creates a hard point that becomes a weak point in a hard/soft (stiff/flexible) connection.",
      "html": "In order to prepare the Teensy to be integrated in the felt pedestal and be connected to the fabric sensors we need to solder wires to select pins and make loops at the ends of these wires so that we can sew to them. Sewable wire loops are a common E-Textile (Electronic Textiles) method for connecting hard and soft components.<br><br>\nSince we have six analog sensors, we need to solder six wires to six analog pins and one wire to GND for the common ground. We chose to connect to analog pins: A0, A1, A2, A3, A4, A9 and the top left GND pin. Cut a roughly 10cm long piece of multi-stranded wire (this kind of wire is more flexible than a single core wire) and strip both ends of the isolation. Solder one end to the Teensy and turn the other into a pea-size loop. Figure 7 shows close-ups of this process. Soldering the twists of the loop to keep them from unraveling is optional. I prefer not to solder because the solder creates a hard point that becomes a weak point in a hard/soft (stiff/flexible) connection.<br><br>"
    },
    {
      "title": "Step 5: Sew the Fabric Sensors",
      "media": [
        {
          "src": "https://content.instructables.com/FDZ/FISA/GKS0U5LC/FDZFISAGKS0U5LC.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Sew the Fabric Sensors"
        },
        {
          "src": "https://content.instructables.com/FEF/IG5L/GKS0U5HT/FEFIG5LGKS0U5HT.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Sew the Fabric Sensors"
        },
        {
          "src": "https://content.instructables.com/FHN/6CBM/GKS0U5HU/FHN6CBMGKS0U5HU.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Sew the Fabric Sensors"
        },
        {
          "src": "https://content.instructables.com/FH1/2UU2/GKS0U5H4/FH12UU2GKS0U5H4.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Sew the Fabric Sensors"
        }
      ],
      "body": "The fabric sensors are constructed by sandwitching a piece of piezoresistive fabric between two conductors. We use an EeonTex fabric as a piezoresistive material and conductive thread as conductors. Piezoresistive materials have the property that their electrical resistance decreases under pressure. We can detect this change by putting voltage though the material (the conductive threads on either side carry the voltage) and then measuring how much goes through (reading the analog signal from the Teensy pin), depending on the level of resistance, which is pressure dependant.\nIn transferring the sensor layout from the illustration to your felt layers, you primarily want to pay attention that the front right sensor is located beneath the round sun graphic in the griptape design and that the rear left sensor is located beneath the moon shaped graphic.Bottom Layer\nThe bottom layer is made up of the bottom felt layer with the Teensy board mounted at the tip and the individual conductive threads connected to the wire loops that we soldered to it in the previous step. From the loops the threads are sewn into the felt and only exposed where the thread is marked as a thick line.\nStart sewing the bottom layer by cutting a piece of conductive thread about 1m long and thread through needle. Tie a knot in the far end. Begin sewing at the sensor end of one of the sensors and stitch the first stitch from the back of the bottom layer felt so that the knot catches on the back. Now sew and expose the conductive thread only where it is marked as a thick line in the above illustration. Where it is marked as a dotted line you should sew the thread inside the felt, isolating and protecting it. Sew the thread all the way from the exposed sensor end to the wire loop connected to the Teensy board. With 4-5 stitches sew the thread to the wire loop as illustrated in the images. End the sewing with a knot and use some hot-glue or superglue to keep the thread from fraying and unraveling. The thread connected to the GND wire connects to a piece of conductive Velcro. Hot-glue the teens to the felt for extra stability.\nMake sure to mark where you have sewn with your conductive threads so that you know where they are! On the bottom layer you are swing individual analog inputs and you don’t want one to touch the another!\nIf you want to be extra safe, use a multimeter to measure electrical continuity/resistance after sewing each sensor thread. See Multimeter Test (next step).Middle Layer\nThe middle layer is made up of individual pieces of piezo-resistive fabric. These are held in place by fusing them to the bottom felt layer with fusible interfacing around their edges. They can also be sewn into place by lightly stitching around their edges.\nTo create the middle layer cut pieces of EeonTex fabric roughly 20x7cm large. They should be roughly 2cm larger than the area of exposed conductive thread. Now you can use fusible interfacing around the edges (but not the middle!) of the EeonTex patches to iron them on to the bottom felt layer or you can stitch them down with some regular sewing thread.Top Layer\nThe top layer is similar to the bottom layer, except that here all the individual conductive threads are connected at the common ground (GND) point. This point is a piece of conductive Velcro, allowing the common ground to “jump” over to the bottom layer where it connects to the Teensy board.\nSew the top layer of felt the same way you sewed the bottom, except here all the conductive threads are connected at the patch of conductive Velcro. Note that you can use the same strand of conductive thread to sew all the sensors as shown in the illustration.",
      "html": "The fabric sensors are constructed by sandwitching a piece of piezoresistive fabric between two conductors. We use an EeonTex fabric as a piezoresistive material and conductive thread as conductors. Piezoresistive materials have the property that their electrical resistance decreases under pressure. We can detect this change by putting voltage though the material (the conductive threads on either side carry the voltage) and then measuring how much goes through (reading the analog signal from the Teensy pin), depending on the level of resistance, which is pressure dependant.<br>\nIn transferring the sensor layout from the illustration to your felt layers, you primarily want to pay attention that the front right sensor is located beneath the round sun graphic in the griptape design and that the rear left sensor is located beneath the moon shaped graphic.<br><br><strong>Bottom Layer</strong><br>\nThe bottom layer is made up of the bottom felt layer with the Teensy board mounted at the tip and the individual conductive threads connected to the wire loops that we soldered to it in the previous step. From the loops the threads are sewn into the felt and only exposed where the thread is marked as a thick line.<br>\nStart sewing the bottom layer by cutting a piece of conductive thread about 1m long and thread through needle. Tie a knot in the far end. Begin sewing at the sensor end of one of the sensors and stitch the first stitch from the back of the bottom layer felt so that the knot catches on the back. Now sew and expose the conductive thread only where it is marked as a thick line in the above illustration. Where it is marked as a dotted line you should sew the thread inside the felt, isolating and protecting it. Sew the thread all the way from the exposed sensor end to the wire loop connected to the Teensy board. With 4-5 stitches sew the thread to the wire loop as illustrated in the images. End the sewing with a knot and use some hot-glue or superglue to keep the thread from fraying and unraveling. The thread connected to the GND wire connects to a piece of conductive Velcro. Hot-glue the teens to the felt for extra stability.<br>\nMake sure to mark where you have sewn with your conductive threads so that you know where they are! On the bottom layer you are swing individual analog inputs and you don’t want one to touch the another!<br>\nIf you want to be extra safe, use a multimeter to measure electrical continuity/resistance after sewing each sensor thread. See Multimeter Test (next step).<br><br><strong>Middle Layer</strong><br>\nThe middle layer is made up of individual pieces of piezo-resistive fabric. These are held in place by fusing them to the bottom felt layer with fusible interfacing around their edges. They can also be sewn into place by lightly stitching around their edges.<br>\nTo create the middle layer cut pieces of EeonTex fabric roughly 20x7cm large. They should be roughly 2cm larger than the area of exposed conductive thread. Now you can use fusible interfacing around the edges (but not the middle!) of the EeonTex patches to iron them on to the bottom felt layer or you can stitch them down with some regular sewing thread.<br><br><strong>Top Layer</strong><br>\nThe top layer is similar to the bottom layer, except that here all the individual conductive threads are connected at the common ground (GND) point. This point is a piece of conductive Velcro, allowing the common ground to “jump” over to the bottom layer where it connects to the Teensy board.<br>\nSew the top layer of felt the same way you sewed the bottom, except here all the conductive threads are connected at the patch of conductive Velcro. Note that you can use the same strand of conductive thread to sew all the sensors as shown in the illustration.<br><br>"
    },
    {
      "title": "Step 6: Multimeter Test",
      "media": [
        {
          "src": "https://content.instructables.com/FM8/EF31/GKS0U5HS/FM8EF31GKS0U5HS.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Multimeter Test"
        }
      ],
      "body": "To make sure that all your sensors are working and correctly connected you want to use a multimeter to measure electrical continuity/resistance. Set the multimeter to measure resistance (Ohm, Omega). Measure on the Teensy board at the solder connections to make sure non of the analog inputs that we are using are inter-connected. If they are inter-connected then the multimeter will show a very low resistance value (less than 1 Kilo Ohm is already a bad sign). If you have any bad connections you will need to find out where these are and fix them. Possibly conductive threads are touching inside the felt where you cannot see. Undo things one by one, testing as you go, so that you can find out where the error lies.\nWhen everything is connected as should be you are ready to layer your felt pedestal and test your sensors. Stack the felt layers together and place the skimboard on top of them.",
      "html": "To make sure that all your sensors are working and correctly connected you want to use a multimeter to measure electrical continuity/resistance. Set the multimeter to measure resistance (Ohm, Omega). Measure on the Teensy board at the solder connections to make sure non of the analog inputs that we are using are inter-connected. If they are inter-connected then the multimeter will show a very low resistance value (less than 1 Kilo Ohm is already a bad sign). If you have any bad connections you will need to find out where these are and fix them. Possibly conductive threads are touching inside the felt where you cannot see. Undo things one by one, testing as you go, so that you can find out where the error lies.<br><br>\nWhen everything is connected as should be you are ready to layer your felt pedestal and test your sensors. Stack the felt layers together and place the skimboard on top of them.<br>"
    },
    {
      "title": "Step 7: Program the Teensy",
      "media": [
        {
          "src": "https://content.instructables.com/FQI/6FW0/GKS0U5H6/FQI6FW0GKS0U5H6.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Program the Teensy"
        },
        {
          "src": "https://content.instructables.com/FS2/KPU9/GKS0U5H5/FS2KPU9GKS0U5H5.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Program the Teensy"
        }
      ],
      "body": "Programming the Teensy is made easy by allowing you to use the Arduino environment with the Teensyduino add-on. If you have not already got Arduino installed on your computer you will want to do this (for links to all downloads see the first step!). Then you will want to download the Teensyduino add-on and run the installer. Finally you will also want to download and install the Teensy Loader application.\nAnd finally finally you will also want to download and unzip the skimboard-test.zip and skimboard-code.zip files.\nBefore using the skimboard code that turns the skimboard into a keyboard and triggers the appropriate keystrokes to play the game you will want to program the Teensy to be a serial device that simply sends the sensor values as numbers for you to read. This is so that you can double check and make sure that all your sensors are working and figure out their range of values before uploading the final code. You can always re-program the Teensy.Test Code\nOpen the skimboard-test.pde file in Arduino. Plug the mini USB cable from your computer to the Teensy. In Arduino go to the Tools menu >> board and select the ‘Teensy 2.0’. Go back to the Tools menu and under UBS Type select ‘Serial’. Press the play button to compile the code. When it has successfully compiled (see bottom of window), press the small physical button on the teensy board (make sure the Teensy Loader application is running). You should now see the Teensy Loader application become active and indicate that the code (skimboard-test.hex) uploaded successfully.\nNow open the serial monitor from your Arduino window (the symbol furthest to the right). In the serial monitor window you should see a continous stream of text and numbers begin to appear. It should look something like this:Left: 1020 909 922 2855 Right: 980 1010 940 2930 Sum: 5785\nWhere the values mean the following:Left sensors: #front# #middle# #back# #sum# Right sensors: #front# #middle# #back# #sum# Sum: #total#\nWhat you want to look for is that when your skimboard is in a “relaxed state” (= nobody standing on it) that the values you are getting for the individual sensors are all relatively high (like in the example). The highest they can go is 1024 (10 bit). The lowest they can go is 0. When you step on the skimboard you want the values to go low (as low as possible), but above all you want to make sure that you get a difference in sum values for left and right when you lean or step to the left or right of the skimboard. If this is all working then you are all set to upload the skimboard-game.pde file to the Teensy so that it will start acting like a computer keyboard and play the game. If it is not working as described then you want to debug. Keep the program running and the Teensy connected while you unstuck the layers and tweak around with the sensors until you found the error. This might take you some time and patience, and please feel free to contact us regarding any issues that arise at this point.Game Code\nRepeat the above steps with the skimboard-code.pde file. But in the Tools menu under USB Type select ‘Keyboard + Mouse’.\nIf the upload was successful then your Teensy is now recognized by your computer as a Human Interface Device (HID), in our case a keyboard sending keystrokes when you lean to left or right and jump. Run the game or open up a text editor and step on the skimboard to see that it works.",
      "html": "Programming the Teensy is made easy by allowing you to use the Arduino environment with the Teensyduino add-on. If you have not already got Arduino installed on your computer you will want to do this (for links to all downloads see the first step!). Then you will want to download the Teensyduino add-on and run the installer. Finally you will also want to download and install the Teensy Loader application.<br><br>\nAnd finally finally you will also want to download and unzip the skimboard-test.zip and skimboard-code.zip files.<br>\nBefore using the skimboard code that turns the skimboard into a keyboard and triggers the appropriate keystrokes to play the game you will want to program the Teensy to be a serial device that simply sends the sensor values as numbers for you to read. This is so that you can double check and make sure that all your sensors are working and figure out their range of values before uploading the final code. You can always re-program the Teensy.<br><br><strong>Test Code</strong><br>\nOpen the skimboard-test.pde file in Arduino. Plug the mini USB cable from your computer to the Teensy. In Arduino go to the Tools menu &gt;&gt; board and select the ‘Teensy 2.0’. Go back to the Tools menu and under UBS Type select ‘Serial’. Press the play button to compile the code. When it has successfully compiled (see bottom of window), press the small physical button on the teensy board (make sure the Teensy Loader application is running). You should now see the Teensy Loader application become active and indicate that the code (skimboard-test.hex) uploaded successfully.<br><br>\nNow open the serial monitor from your Arduino window (the symbol furthest to the right). In the serial monitor window you should see a continous stream of text and numbers begin to appear. It should look something like this:<br><em>Left: 1020 909 922 2855 Right: 980 1010 940 2930 Sum: 5785</em><br><br>\nWhere the values mean the following:<br><em>Left sensors: #front# #middle# #back# #sum# Right sensors: #front# #middle# #back# #sum# Sum: #total#</em><br><br>\nWhat you want to look for is that when your skimboard is in a “relaxed state” (= nobody standing on it) that the values you are getting for the individual sensors are all relatively high (like in the example). The highest they can go is 1024 (10 bit). The lowest they can go is 0. When you step on the skimboard you want the values to go low (as low as possible), but above all you want to make sure that you get a difference in sum values for left and right when you lean or step to the left or right of the skimboard. If this is all working then you are all set to upload the skimboard-game.pde file to the Teensy so that it will start acting like a computer keyboard and play the game. If it is not working as described then you want to debug. Keep the program running and the Teensy connected while you unstuck the layers and tweak around with the sensors until you found the error. This might take you some time and patience, and please feel free to contact us regarding any issues that arise at this point.<br><br><strong>Game Code</strong><br>\nRepeat the above steps with the skimboard-code.pde file. But in the Tools menu under USB Type select ‘Keyboard + Mouse’.<br>\nIf the upload was successful then your Teensy is now recognized by your computer as a Human Interface Device (HID), in our case a keyboard sending keystrokes when you lean to left or right and jump. Run the game or open up a text editor and step on the skimboard to see that it works.<br><br>"
    },
    {
      "title": "Step 8: Finishing Touches",
      "media": [
        {
          "src": "https://content.instructables.com/FLI/N2OE/GKS0U5H3/FLIN2OEGKS0U5H3.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Finishing Touches"
        },
        {
          "src": "https://content.instructables.com/FRK/VPSH/GKS0U5H7/FRKVPSHGKS0U5H7.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Finishing Touches"
        }
      ],
      "body": "Now that the sensors are working and the Teensy is programmed you can sew the bottom, top and buildup layers together and finally adhere them to the skimboard with a sheet of studio-tack (double-sided sticky tape).",
      "html": "Now that the sensors are working and the Teensy is programmed you can sew the bottom, top and buildup layers together and finally adhere them to the skimboard with a sheet of studio-tack (double-sided sticky tape).<br><br>"
    }
  ],
  "author": {
    "name": "Plusea",
    "image": "https://content.instructables.com/FWM/FMOA/JEST9VXQ/FWMFMOAJEST9VXQ.jpg?auto=webp&crop=1%3A1&frame=1&width=130",
    "url": "https://www.instructables.com/member/Plusea/"
  }
},
{
  "type": "project",
  "url": "https://www.instructables.com/Led-Slot-Machine-Costume",
  "title": "Led Slot Machine Costume",
  "isFeatured": true,
  "numberOfViews": 8824,
  "numberOfLikes": 13,
  "numberOfComments": 9,
  "categories": [
    "Circuits",
    "Arduino"
  ],
  "steps": [
    {
      "title": "Introduction: Led Slot Machine Costume",
      "media": [
        {
          "src": "https://content.instructables.com/F1D/KZNM/H742FG8P/F1DKZNMH742FG8P.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Led Slot Machine Costume"
        },
        {
          "src": "https://content.instructables.com/FSW/DK4W/H742FG8L/FSWDK4WH742FG8L.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Led Slot Machine Costume"
        }
      ],
      "body": "This Instructable will walk you through my process of making a Slot Machine costume with addressable leds controlled with an arduino!",
      "html": "This Instructable will walk you through my process of making a Slot Machine costume with addressable leds controlled with an arduino!<br><br><br><br>"
    },
    {
      "title": "Step 1: The Parts List",
      "media": [
        {
          "src": "https://content.instructables.com/FXC/DC8Z/H742FG9A/FXCDC8ZH742FG9A.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FKU/5EDP/H742FG91/FKU5EDPH742FG91.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/F1M/2E1N/H742FG93/F1M2E1NH742FG93.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FBX/T5L7/H742FG95/FBXT5L7H742FG95.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/F55/CBCI/H742FG96/F55CBCIH742FG96.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FXP/G8KM/H742FG97/FXPG8KMH742FG97.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FL3/LHXP/H742FG98/FL3LHXPH742FG98.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FWA/D0JV/H742FG9B/FWAD0JVH742FG9B.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FCN/7W8Y/H742FG9D/FCN7W8YH742FG9D.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FJH/OAIN/H742FG9E/FJHOAINH742FG9E.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FMT/5NIU/H742FGA2/FMT5NIUH742FGA2.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        },
        {
          "src": "https://content.instructables.com/FQJ/GFVU/H7ANSLCQ/FQJGFVUH7ANSLCQ.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Parts List"
        }
      ],
      "body": "Shirt Parts:\nPlain white T-Shirt\nOld or new white shirt to cut\n1 meter addressable led strip from Adafruit \nArduino (I used an uno smd)\nSewing gauge (or other measuring device)\n1 pkg Heat-N-Bond ultra hold \nBattery holder for 4 AA's \n4 AA's rechargeable 1500mah \nIron on transfer paper\nHat parts:\nHot glue gun\nHat\nFlashing led kit ( I got mine from the shack, but it's also avil online elsewhere)\n2 Basic night lights\n2 Lg washers\n9V Batt\nClear tape",
      "html": "Shirt Parts:<br><br>\nPlain white T-Shirt<br><br>\nOld or new white shirt to cut<br><br>\n1 meter addressable led strip from <a href=\"http://adafruit.com/products/306\" rel=\"nofollow noopener noreferrer\">Adafruit</a>&nbsp;<br><br>\nArduino (I used an uno smd)<br><br>\nSewing gauge (or other&nbsp;measuring&nbsp;device)<br><br>\n1 pkg Heat-N-Bond&nbsp;ultra hold&nbsp;<br><br>\nBattery holder for 4 AA's&nbsp;<br><br>\n4 AA's rechargeable 1500mah&nbsp;<br><br>\nIron on transfer paper<br><br><br>\nHat parts:<br><br>\nHot glue gun<br><br>\nHat<br><br>\nFlashing led kit&nbsp;( I got mine from the shack, but it's also avil online elsewhere)<br><br>\n2 Basic night lights<br><br>\n2 Lg washers<br><br>\n9V Batt<br><br>\nClear tape<br><br>"
    },
    {
      "title": "Step 2: Lets Get Started",
      "media": [
        {
          "src": "https://content.instructables.com/FCN/7W8Y/H742FG9D/FCN7W8YH742FG9D.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/FXP/G8KM/H742FG97/FXPG8KMH742FG97.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/FL3/LHXP/H742FG98/FL3LHXPH742FG98.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/FWA/D0JV/H742FG9B/FWAD0JVH742FG9B.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/FH6/0SAB/H742FGE5/FH60SABH742FGE5.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/F6T/RRJR/H742FGE6/F6TRRJRH742FGE6.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/FDQ/PB1P/H742FGE7/FDQPB1PH742FGE7.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/F06/RTXI/H742FGE8/F06RTXIH742FGE8.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        },
        {
          "src": "https://content.instructables.com/FP1/XCL6/H742FGE9/FP1XCL6H742FGE9.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Lets Get Started"
        }
      ],
      "body": "Picture set up:\nI found my slot picture online that the best graphic that when enlarged would stay nice and clear. Be sure to follow the directions on the iron on transfer paper when printing and transferring. Print the picture to full page 8.5 by 11 HINT: Turn off border less printing or it will cut off part of the pic. I forgot and end cut part off the pic. \nLay out the transfer paper and mark the edges with pins ( see pic 1 )  and check to be sure it is centered. Once you are happy with the lay out you can go ahead and lay the transfer back down and remove the pins. \nStart the transfer process following the iron on transfer instructions. Let it cool completely before attempting to remove. If you notice the transfer not bonding as you lift , reheat it until it bonds.\nLight holders:  \nWe need a way for the addressable leds to stay in place. I chose to use Heat-N-Bond with some extra fabric. \nCut fabric strips about 2 1/2\" wide and 2\" longer then each side ( you should end up with 4 strips for all sides) (See Pic 2)\nCut the Heat-N-Bond to the size of the strips and attach following the instructions provided with the package. (See Pic 3)\nCut some more fabric strips to 1 1/2\" wide by as long as the other strips you just made. (See Pic 4)\nCut 2\" by 2\" fabric squares and iron them to the ends of the strips. (See Pic 5)\n           Attach the light holder strips:\nTurn the shirt inside out and position the 1 1/2\" (See pic 4a ) strips along the picture outline. Peal the backing off the Heat-N-Bond of the wider strips and lay facing down on top of small strips being sure it is centered.  (See pic 4b)\nIron on following the instructions provided in package.\nYou should now have long pockets along the perimeter of the picture with 2\" ends that can be lifted ( these will later be used for access to solder the lights then bonded down)  (See pic 6)",
      "html": "Picture set up:<br><br><br>\nI found my slot picture online that the best graphic that when enlarged would stay nice and clear. Be sure to follow the directions on the iron on transfer paper when printing and&nbsp;transferring. Print the picture to full page 8.5 by 11 HINT: Turn off&nbsp;border less&nbsp;printing or it will cut off part of the pic. I forgot and end cut part off the pic.&nbsp;<br><br>\nLay out the transfer paper and mark the edges with pins ( see pic 1 ) &nbsp;and check to be sure it is centered. Once you are happy with the lay out you can go ahead and lay the transfer back down and remove the pins.&nbsp;<br><br>\nStart the transfer process following the iron on transfer instructions. Let it cool&nbsp;completely&nbsp;before attempting to remove. If you notice the transfer not bonding as you lift , reheat it&nbsp;until&nbsp;it bonds.<br><br><br><br><br>\nLight holders: &nbsp;<br><br><br>\nWe need a way for the addressable leds to stay in place. I chose to use Heat-N-Bond with some extra fabric.&nbsp;<br><br>\nCut fabric strips about 2 1/2\" wide and 2\" longer then each side ( you should end up with 4 strips for all sides) (See Pic 2)<br><br>\nCut the Heat-N-Bond to the size of the strips and attach following the instructions provided with the&nbsp;package. (See Pic 3)<br><br>\nCut some more fabric strips to 1 1/2\" wide by as long as the other strips you just made. (See Pic 4)<br><br>\nCut 2\" by 2\" fabric squares and iron them to the ends of the strips. (See Pic 5)<br><br>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Attach the light holder strips:<br><br>\nTurn the shirt inside out and position the 1 1/2\" (See pic 4a ) strips along the picture outline. Peal the backing off the Heat-N-Bond of the wider strips and lay facing down on top of small strips being sure it is centered. &nbsp;(See pic 4b)<br><br>\nIron on following the instructions provided in&nbsp;package.<br><br>\nYou should now have long pockets along the&nbsp;perimeter of the picture with 2\" ends that can be lifted ( these will later be used for access to solder the lights then bonded down) &nbsp;(See pic 6)<br><br><br>\n&nbsp;<br><br><br><br><br><br>\n&nbsp;"
    },
    {
      "title": "Step 3: Moving on to the Next Phase",
      "media": [
        {
          "src": "https://content.instructables.com/F62/AKYC/H742FGDP/F62AKYCH742FGDP.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        },
        {
          "src": "https://content.instructables.com/FC6/M39S/H742FGDR/FC6M39SH742FGDR.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        },
        {
          "src": "https://content.instructables.com/FPP/HMKL/H742FGDU/FPPHMKLH742FGDU.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        },
        {
          "src": "https://content.instructables.com/FP1/C23O/H7ANSL5R/FP1C23OH7ANSL5R.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        },
        {
          "src": "https://content.instructables.com/FZG/4FXI/H7ANSL5S/FZG4FXIH7ANSL5S.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        },
        {
          "src": "https://content.instructables.com/FAK/MFDK/H7ANSL5T/FAKMFDKH7ANSL5T.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        },
        {
          "src": "https://content.instructables.com/FSY/L4TO/H7ANSL6F/FSYL4TOH7ANSL6F.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        },
        {
          "src": "https://content.instructables.com/FQH/4W7D/H7ANSL6G/FQH4W7DH7ANSL6G.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Moving on to the Next Phase"
        }
      ],
      "body": "Adding the lights:\nCut the light strips so there is 6 leds on two strips and 10 leds on two more strips ( 4 strips total)\nInsert the two longer strips into the bottom and top of the light holders (see pic A) Making sure to keep track of  the in and out of each section.\nThen insert the other two strips.\nPlace some foil under the end of the strip so you don't burn the shirt while soldering. These can be soldered on the front or the back either way will do. But be sure to keep track of the 5v+, 5v-, DI, CI lines they must match. It is important that the out put end connects to the input line!! (See Pic B)\nLeave one end unconnected (I chose bottom right) The end of the short strip can be left untouched, However the longer bottom strip with the input will need some pins soldered. ( See Pic C)\nTESTING!!  Must test before closing up fabric ends. \nLoad the arduino sketch and connect to make sure all lights and connections are in working order.\nConnect the Di of the led strip to arduino pin 11\nConnect the Ci of the led strip to arduino pin 13\nConnect the -5V of the led strip to arduino ground\nConnect the +5v of the led strop to arduino +5v\nClose it all up:\nOnce you have determined all is working we can now close up the extra fabric flaps. Lay them all flat and determine if there is any extra you want to trim. Cut a slit where the pins will protrude from and mark the the - and +( See pic D) \nNow cut some small strip of Heat-N-bond and iron it the the shirt just under the flaps, peal the backing and lay the fabric flap over and iron.  ( See pic E for finished look)\nAttach cable of choice again be sure to keep track of the wire layout.",
      "html": "Adding the lights:<br><br><br>\nCut the light strips so there is 6 leds on two strips and 10 leds on two more strips ( 4 strips total)<br><br>\nInsert the two longer strips into the bottom and top of the light holders (see pic A) Making sure to keep track of &nbsp;the in and out of each section.<br>\nThen insert the other two strips.<br><br>\nPlace some foil under the end of the strip so you don't burn the shirt while soldering. These can be soldered on the front or the back either way will do. But be sure to keep track of the 5v+, 5v-, DI, CI lines they must match. It is important that the out put end connects to the input line!! (See Pic B)<br><br>\nLeave one end unconnected (I chose bottom right) The end of the short strip can be left untouched, However the longer bottom strip with the input will need some pins soldered. ( See Pic C)<br><br><br>\nTESTING!! &nbsp;Must test before closing up fabric ends.&nbsp;<br><br>\nLoad the arduino sketch and connect to make sure all lights and connections are in working order.<br><br>\nConnect the Di of the led strip to arduino pin 11<br>\nConnect the Ci of the led strip to arduino pin 13<br>\nConnect the -5V of the led strip to arduino ground<br>\nConnect the +5v of the led strop to arduino +5v<br><br><br><br>\nClose it all up:<br><br>\nOnce you have determined all is working we can now close up the extra fabric flaps. Lay them all flat and determine if there is any extra you want to trim. Cut a slit where the pins will&nbsp;protrude from and mark the the - and +( See pic D)&nbsp;<br><br>\nNow cut some small strip of Heat-N-bond and iron it the the shirt just under the flaps, peal the backing and lay the fabric flap over and iron. &nbsp;( See pic E for finished look)<br><br>\nAttach cable of choice again be sure to keep track of the wire layout.&nbsp;<br><br><br><br><br><br><br><br>"
    },
    {
      "title": "Step 4: The Enclosure",
      "media": [
        {
          "src": "https://content.instructables.com/FI3/22A8/H7ANSL9O/FI322A8H7ANSL9O.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Enclosure"
        },
        {
          "src": "https://content.instructables.com/FVP/XTGI/H7ANSL9Q/FVPXTGIH7ANSL9Q.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Enclosure"
        },
        {
          "src": "https://content.instructables.com/FXC/DC8Z/H742FG9A/FXCDC8ZH742FG9A.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Enclosure"
        },
        {
          "src": "https://content.instructables.com/F3Q/MA1D/H7ANSL9N/F3QMA1DH7ANSL9N.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Enclosure"
        },
        {
          "src": "https://content.instructables.com/FS6/KI9Y/H7ANSL9P/FS6KI9YH7ANSL9P.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "The Enclosure"
        }
      ],
      "body": "For the enclosure I used a plastic box I had laying around and It fit just right. An altoids tin will work just as well. \nConnect some wire to four pins and make a small hole in the side of the enclosure (See pic A1) On the inside of the enclosure slit the wire so you have 2 sets of 2 . Take 2 pins and bend at a 90o angle and solder the +5v and -5v to these. Next take 3pins beld at a 90o angle and solder the Di and Ci wires to each end. \nBatteries:\nI used a battery holder for 4 AA's it has two wires and a switch. Chose the location of the battery holder and cut a small hole for the switch. Connect 2 pins bet at a 90o angle and solder to the end. ( These will connect to the VIN and gnd on the arduino\nThe enclosure is now complete!!",
      "html": "For the enclosure I used a plastic box I had laying around and It fit just right. An altoids tin will work just as well.&nbsp;<br><br>\nConnect some wire to four pins and make a small hole in the side of the enclosure (See pic A1) On the inside of the enclosure slit the wire so you have 2 sets of 2 . Take 2 pins and bend at a 90o angle and solder the +5v and -5v to these. Next take 3pins beld at a 90o angle and solder the Di and Ci wires to each end.&nbsp;<br><br><br>\nBatteries:<br><br>\nI used a battery holder for 4 AA's it has two wires and a switch. Chose the location of the battery holder and cut a small hole for the switch. Connect 2 pins bet at a 90o angle and solder to the end. ( These will connect to the VIN and gnd on the arduino<br><br><br>\nThe enclosure is now complete!!"
    },
    {
      "title": "Step 5: Hat Light",
      "media": [
        {
          "src": "https://content.instructables.com/F2F/N6TO/H7ANSLCI/F2FN6TOH7ANSLCI.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/FF5/ATBC/H7ANSLCK/FF5ATBCH7ANSLCK.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/FQJ/GFVU/H7ANSLCQ/FQJGFVUH7ANSLCQ.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/F6I/1O5L/H7ANSLCR/F6I1O5LH7ANSLCR.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/F2V/YL4K/H7ANSLCS/F2VYL4KH7ANSLCS.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/FHM/YTG8/H7ANSLCV/FHMYTG8H7ANSLCV.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/FDH/S1I8/H7ANSLCX/FDHS1I8H7ANSLCX.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/FQG/ZNW0/H7ANSLCY/FQGZNW0H7ANSLCY.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/FWR/INZQ/H7ANSLCZ/FWRINZQH7ANSLCZ.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        },
        {
          "src": "https://content.instructables.com/FLI/KRUO/H7ANSLD1/FLIKRUOH7ANSLD1.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Hat Light"
        }
      ],
      "body": "Building the hat light:\nStart heating up the glue gun:\nBuild the flashing led kit. Then remove  the covers from 2 nightlights and trace the outline from the bottom of the covers on a piece of cardboard (this will separate and hold the led kit in place). (pic C1)\nThe cardboard will need to be trimmed a bit more as needed so as it holds it in the center. (pic C2)\nHold one nightlight on the front of the hat with the washer inside on the bottom slightly to one side of the center of the hat and place some glue in the center of the washer and hold till it dries. Remove the light cover and repeat for the second washer. (pic C3) \nNow assemble the light with the cardboard and flasher kit inside under both washers and place a piece of clear tape over the seam.(pic C4)     Make a small hole in the hat by the seam of the brim and face to run the wire inside. Now on the inside add a switch and battery clip.(pic C5, C6)     Glue the switch behind the sweat band so it can easily be reached. Glue the 9V batt to the side of the hat where it will be comfortable. I chose the the top front where the hat sticks out the most.",
      "html": "Building the hat light:<br><br>\nStart heating up the glue gun:<br><br>\nBuild the flashing led kit. Then remove &nbsp;the covers from 2 nightlights and trace the outline from the bottom of the covers on a piece of cardboard (this will&nbsp;separate&nbsp;and hold the led kit in place). (pic C1)<br>\nThe cardboard will need to be trimmed a bit more as needed so as it holds it in the center. (pic C2)<br><br>\nHold one nightlight on the front of the hat with the washer inside on the bottom slightly to one side of the center of the hat and place some glue in the center of the washer and hold till it dries. Remove the light cover and repeat for the second washer. (pic C3)&nbsp;<br><br>\nNow assemble the light with the cardboard and flasher kit inside under both washers and place a piece of clear tape over the seam.(pic C4) &nbsp; &nbsp; Make a small hole in the hat by the seam of the brim and face to run the wire inside. Now on the inside add a switch and battery clip.(pic C5, C6) &nbsp; &nbsp; Glue the switch behind the sweat band so it can easily be reached. Glue the 9V batt to the side of the hat where it will be&nbsp;comfortable. I chose the the top front where the hat sticks out the most.&nbsp;&nbsp;<br><br><br><br>"
    },
    {
      "title": "Step 6: Code and Video",
      "media": [],
      "body": "#include \"LPD8806.h\"  #include   // Example to control LPD8806-based RGB LED Modules in a strip  //digital in pin 11  //clock in pin 13  /*****************************************************************************/  // The LED strips are 32 LEDs per meter but you can extend/cut the strip  LPD8806 strip = LPD8806(32); // Set the first variable to the NUMBER of pixels. 32 = 32 pixels in a row  void setup() {    // Start up the LED strip    strip.begin();    // Update the strip, to start they are all 'off'    strip.show();  }  void loop() {    randomSparkleUpSegment(strip.Color(25,0,0),15,10,101,152); //color, density, delay, low point, high point    turnSegmentOn(strip.Color(25,0,0),1000, 101, 152); //color, delay, start of segment, end of segment    randomSparkleUpSegment(strip.Color(0,25,0),15,10,0,100); //color, density, delay, low point, high point    turnSegmentOn(strip.Color(0,25,0),200,0,100); //color, delay, start of segment, end of segment    delay(500);    turnAllOff;    fillUpTheStar(strip.Color(0,0,25),30); //color, delay    fillUpCenterStar(strip.Color(0,0,25),30); //color, delay    fillUpTheStar(strip.Color(25,0,0),30); //color, delay    fillUpCenterStar(strip.Color(25,0,0),30); //color, delay    fillUpTheStar(strip.Color(0,25,0),30); //color, delay    fillUpCenterStar(strip.Color(0,25,0),30); //color, delay    fillUpTheStar(strip.Color(25,25,25),30); //color, delay    fillUpCenterStar(strip.Color(25,25,25),30); //color, delay       turnAllOn(strip.Color(25,0,0),200); //color, delay - turn all pixels one color    dither(strip.Color(0,25,0), 50); //color, delay - random fills up the strip    fadeDown(0,25,0,30); //red, green, blue, delay - fade down all pixels one color    dither(strip.Color(25,0,0), 50); //color, delay - random fills up the strip    fadeDown(25,0,0,30); //red, green, blue, delay - fade down all pixels one color         turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color    turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color    chaseBetweenLToH(strip.Color(25,25,25),20,0,100); //color, delay, low, high - chase led between two locations progressing up the chain    chaseBetweenHToL(strip.Color(25,25,25),20,103,152); //color, delay, low, high - chase led between two locations progressing down the chain       turnAllOff(); //turn all pixels off    fadeUp(25,0,0,20); //red, green, blue, delay - fade up all pixels one color    fadeDown(25,0,0,20); //red, green, blue, delay - fade down all pixels one color    fadeUp(0,25,0,20); //red, green, blue, delay - fade up all pixels one color    fadeDown(0,25,0,20); //red, green, blue, delay - fade down all pixels one color    turnAllOff();       /// strobe effect r/g rg    randomSparkle(strip.Color(25,0,0),20, 30); //color, density, delay - random sparkles in one color    randomSparkle(strip.Color(0,25,0),20, 30); //color, density, delay - random sparkles in one color    twoColorSparkle(strip.Color(25,0,0), strip.Color(0,25,0), 20, 10); //color 1, color 2, density, delay - random sparkles in two colors    rainbow(20);    turnAllOff();    randomColorSparkle(30); //delay - random color sparkles       turnAllOn(strip.Color(0,0,25),1000); //color, delay - turn all pixels one color    chaseBetweenLToH(strip.Color(25,25,25),1,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain    chaseBetweenLToH(strip.Color(0,25,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain    chaseBetweenHToL(strip.Color(25,0,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing down the chain    chaseBetweenHToL(strip.Color(0,25,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing down the chain    chaseToCenter(strip.Color(25,0,0),25,1,0,159); //color, number of leds in line, delay, low, high - chase lines to the center    chasePastCenter(strip.Color(25,0,0),25,1,0,159); //color, number of leds in line, delay, low, high - chase lines past the center    chaseBetweenLToH(strip.Color(50,50,25),1,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain    chaseBetweenLToH(strip.Color(25,0,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain    chaseBetweenLToH(strip.Color(0,25,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain    chaseLineHToL(strip.Color(25,0,0),50,0,0,159); //color, number of leds in line, delay, low, high - chase leds in a line progressing up the chain    chaseLineLToH(strip.Color(0,25,0),50,0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain       rainbowCycle(0);  // make it go through the cycle fairly fast    turnAllOff();       //red and green segments around perimeter, center blue    int i;    for(i=1; i<=4; i++){    delay(1000);    fadeDown(25,25,25,40); //red, green, blue, delay - fade down all pixels one color    }       turnAllOn(strip.Color(0,0,25),200);    dither(strip.Color(25,0,0), 20); //color, delay - random fills up the strip    fadeDown(25,0,0,30); //red, green, blue, delay - fade down all pixels one color       turnSegmentOn(strip.Color(0,0,25),10,104,159); //color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,0,25),10,0,103); //color, delay, start of segment, end of segment      chaseUpTheStar(strip.Color(25,0,0),30); //color, delay    chaseUpCenterStar(strip.Color(25,0,0),30); //color, delay    turnSegmentOn(strip.Color(0,25,0),10,0,159); //color, delay, start of segment, end of segment    chaseUpTheStar(strip.Color(25,0,0),30); //color, delay    turnAllOff();       fillUpTheStar(strip.Color(25,0,0),30); //color, delay    fillUpCenterStar(strip.Color(0,25,0), 30); //color, delay    fillUpTheStar(strip.Color(0,25,0),30); //color, delay    fillUpCenterStar(strip.Color(25,0,0),30); //color, delay    fillUpTheStar(strip.Color(25,25,25),30); //color, delay    fillUpCenterStar(strip.Color(25,25,25),30); //color, delay       turnAllOff();    dither(strip.Color(0,25,25), 10); //color, delay - random fills up the strip    fadeDown(0,25,25,20); //red, green, blue, delay - fade down all pixels one color    turnAllOff();    scanner(25,0,0,10); //red, green, blue, delay                                 turnAllOff();    wave(strip.Color(25,0,0),5,0,200); //color, cycles, delay, repetitions    fadeDown(25,0,0,20); //red, green, blue, delay - fade down all pixels one color    wave(strip.Color(0,25,0),5,0,200); //color, cycles, delay, repetitions    turnAllOff();          randomSparkleUpStrip(strip.Color(25,25,25),15,10); //color, density, wait    turnAllOn(strip.Color(25,25,25),500);    fadeDown(25,25,25,20); //red, green, blue, delay - fade down all pixels one color    randomSparkleUpStrip(strip.Color(20,20,25),15,10);    turnAllOn(strip.Color(20,20,25),500);    fadeDown(20,20,25,20); //red, green, blue, delay - fade down all pixels one color    randomSparkleUpStrip(strip.Color(25,50,25),15,10);    turnAllOn(strip.Color(25,50,25),500);    fadeDown(25,50,25,20); //red, green, blue, delay - fade down all pixels one color    randomSparkleUpStrip(strip.Color(20,25,39),15,10);    turnAllOn(strip.Color(20,127,39),500);    fadeDown(20,25,39,20); //red, green, blue, delay - fade down all pixels one color    randomSparkleUpStrip(strip.Color(10,10,25),15,10);    turnAllOn(strip.Color(10,10,25),500);    fadeDown(10,10,25,20); //red, green, blue, delay - fade down all pixels one color    turnAllOn(strip.Color(0,25,0),400);    chaseBetweenLToH(strip.Color(25,0,0),20,0,100); //color, delay, low, high - chase led between two locations progressing up the chain    chaseBetweenHToL(strip.Color(25,0,0),20,103,152); //color, delay, low, high - chase led between two locations progressing down the chain  //green to red wave                                                                 wave(strip.Color(0,25,0),5,0,100); //color, cycles, delay, repetitions    wave(strip.Color(20,25,0),10,0,50); //color, cycles, delay, repetitions    wave(strip.Color(40,25,0),15,0,50); //color, cycles, delay, repetitions    wave(strip.Color(80,25,0),20,0,50); //color, cycles, delay, repetitions    wave(strip.Color(25,25,0),25,0,50); //color, cycles, delay, repetitions    wave(strip.Color(25,80,0),35,0,50); //color, cycles, delay, repetitions    wave(strip.Color(25,40,0),35,0,50); //color, cycles, delay, repetitions    wave(strip.Color(25,20,0),35,0,50); //color, cycles, delay, repetitions    wave(strip.Color(25,0,0),35,0,100); //color, cycles, delay, repetitions    wave(strip.Color(25,0,0),35,0,50); //color, cycles, delay, repetitions       turnAllOff();    wave(strip.Color(0,25,0),35,0,100); //color, cycles, delay, repetitions    wave(strip.Color(20,107,0),35,0,50); //color, cycles, delay, repetitions    wave(strip.Color(40,87,0),35,0,50); //color, cycles, delay, repetitions    wave(strip.Color(80,47,0),30,0,50); //color, cycles, delay, repetitions    wave(strip.Color(107,27,0),20,0,100); //color, cycles, delay, repetitions    wave(strip.Color(25,0,0),5,0,200); //color, cycles, delay, repetitions       int j;    for(j=1; j<=15; j++){    turnSegmentOn(strip.Color(0,0,25),0, 60, 100);//red 1 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,0,0),0, 147, 152); //blue 1 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,0,0),200, 103, 109); //blue 1 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,25,0),0, 44, 59); //red 4 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,25,0),0, 110, 121); //blue 4 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,0,25),0, 0, 15); //red 2 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,0,0),200, 135, 146); //blue 2 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,25,0),0, 60, 100); //red 1 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,25,0),0, 147, 152); // blue 1 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,25,0),0, 103, 109); //blue 1 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,0,25),0, 16, 43); //red 3 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,0,0),200, 122, 134); //blue 3 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,25,0),0, 0, 15); //red 2 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,25,0),0, 135, 146); //blue 2 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,0,25),0, 44, 59); //red 4 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,0,0),200, 110, 121); //blue 4 on - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(25,25,0),0, 16, 43); //red 3 off - color, delay, start of segment, end of segment    turnSegmentOn(strip.Color(0,25,0),0, 122, 134); //blue 3 off - color, delay, start of segment, end of segment    }          chaseMultipleLinesLToH(10,10,0,152); //number of leds in line, delay, low, high - chase multiple lines progressing up the chain  }  // An \"ordered dither\" fills every pixel in a sequence that looks  // sparkly and almost random, but actually follows a specific order.  void dither(uint32_t c, uint8_t wait) {    // Determine highest bit needed to represent pixel index    int hiBit = 0;    int n = strip.numPixels() - 1;    for(int bit=1; bit < 0x8000; bit <<= 1) {      if(n & bit) hiBit = bit;    }    int bit, reverse;    for(int i=0; i<(hiBit << 1); i++) {      // Reverse the bits in i to create ordered dither:      reverse = 0;      for(bit=1; bit <= hiBit; bit <<= 1) {        reverse <<= 1;        if(i & bit) reverse |= 1;      }      strip.setPixelColor(reverse, c);      strip.show();      delay(wait);    }    delay(250); // Hold image for 1/4 sec  }  // \"Larson scanner\" = Cylon/KITT bouncing light effect  void scanner(uint8_t r, uint8_t g, uint8_t b, uint8_t wait) {    int i, j, pos, dir;    pos = 0;    dir = 1;    for(i=0; i<((strip.numPixels()-1) * 8); i++) {      // Draw 5 pixels centered on pos. setPixelColor() will clip      // any pixels off the ends of the strip, no worries there.      // we'll make the colors dimmer at the edges for a nice pulse      // look      strip.setPixelColor(pos - 2, strip.Color(r/4, g/4, b/4));      strip.setPixelColor(pos - 1, strip.Color(r/2, g/2, b/2));      strip.setPixelColor(pos, strip.Color(r, g, b));      strip.setPixelColor(pos + 1, strip.Color(r/2, g/2, b/2));      strip.setPixelColor(pos + 2, strip.Color(r/4, g/4, b/4));      strip.show();      delay(wait);      // If we wanted to be sneaky we could erase just the tail end      // pixel, but it's much easier just to erase the whole thing      // and draw a new one next time.      for(j=-2; j<= 2; j++)          strip.setPixelColor(pos+j, strip.Color(0,0,0));      // Bounce off ends of strip      pos += dir;      if(pos < 0) {        pos = 1;        dir = -dir;      } else if(pos >= strip.numPixels()) {        pos = strip.numPixels() - 2;        dir = -dir;      }    }  }  // Sine wave effect  #define PI 3.14159265  void wave(uint32_t c, int cycles, uint8_t wait, int repetitions) {    float y;    byte r, g, b, r2, g2, b2;    // Need to decompose color into its r, g, b elements    g = (c >> 16) & 0x7f;    r = (c >> 8) & 0x7f;    b = c & 0x7f;    for(int x=0; x   {      for(int i=0; i       y = sin(PI * (float)cycles * (float)(x + i) / (float)strip.numPixels());          y = 1.0 - y; // Translate Y to 0.0 (top) to 1.0 (center)          r2 = (byte)((float)r * y);          g2 = (byte)((float)g * y);          b2 = (byte)((float)b * y);               strip.setPixelColor(i, r2, g2, b2);      }      strip.show();      delay(wait);    }  }  void chaseUpTheStar(uint32_t c, uint8_t wait) {    int i,j;        strip.setPixelColor(80, c);        delay(wait);        strip.setPixelColor(80, strip.Color(0,0,0));           for (i = 1; i <= 20; i++) {             strip.setPixelColor(80+i, c);             strip.setPixelColor(80-i, c);             strip.show();   // write all the pixels out             delay(wait);             strip.setPixelColor(80+i, strip.Color(0,0,0));             strip.setPixelColor(80-i, strip.Color(0,0,0));             strip.show();   // write all the pixels out           }           for (j=0; j<=29; j++) {             strip.setPixelColor(j, c);             strip.setPixelColor(59-j, c);             strip.show();   // write all the pixels out             delay(wait);             strip.setPixelColor(j, strip.Color(0,0,0));             strip.setPixelColor(59-j, strip.Color(0,0,0));             strip.show();   // write all the pixels out           }   }  void chaseUpCenterStar(uint32_t c, uint8_t wait) {    int i,j;           for (i = 1; i <= 6; i++) {             strip.setPixelColor(146+i, c);             strip.setPixelColor(147-i, c);             strip.show();   // write all the pixels out             delay(wait);             strip.setPixelColor(146+i, strip.Color(0,0,0));             strip.setPixelColor(147-i, strip.Color(0,0,0));             strip.show();   // write all the pixels out           }           for (j=0; j<=18; j++) {             strip.setPixelColor(103+j, c);             strip.setPixelColor(140-j, c);             strip.show();   // write all the pixels out             delay(wait);             strip.setPixelColor(103+j, strip.Color(0,0,0));             strip.setPixelColor(140-j, strip.Color(0,0,0));             strip.show();   // write all the pixels out           }   }  void fillUpTheStar(uint32_t c, uint8_t wait) {    int i,j;        strip.setPixelColor(80, c);        delay(wait);           for (i = 1; i <= 20; i++) {             strip.setPixelColor(80+i, c);             strip.setPixelColor(80-i, c);             strip.show();   // write all the pixels out             delay(wait);             }           for (j=0; j<=29; j++) {             strip.setPixelColor(j, c);             strip.setPixelColor(59-j, c);             strip.show();   // write all the pixels out             delay(wait);             }   }  void fillUpCenterStar(uint32_t c, uint8_t wait) {    int i,j;           for (i = 1; i <= 6; i++) {             strip.setPixelColor(146+i, c);             strip.setPixelColor(147-i, c);             strip.show();   // write all the pixels out             delay(wait);             }           for (j=0; j<=18; j++) {             strip.setPixelColor(103+j, c);             strip.setPixelColor(140-j, c);             strip.show();   // write all the pixels out             delay(wait);             }   }  void chaseBetweenLToH(uint32_t c, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i;           for (i = pointL; i <= pointH; i++) {             strip.setPixelColor(i, c);             strip.show();   // write all the pixels out             delay(wait);             strip.setPixelColor(i, strip.Color(0,0,0));             strip.show();   // write all the pixels out             }   }  void chaseBetweenHToL(uint32_t c, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i;           for (i = pointH; i >= pointL; i--) {             strip.setPixelColor(i, c);             strip.show();   // write all the pixels out             delay(wait);             strip.setPixelColor(i, strip.Color(0,0,0));             strip.show();   // write all the pixels out             }   }  void chaseLineLToH(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i, j;           for(i = pointL; i < pointH+lineNumber; i++) {             for(j = 0; j < lineNumber; j++) {               strip.setPixelColor(i-j, c);               }           strip.show();   // write all the pixels out           delay(wait);           turnAllOff();           }   }  void chaseLineHToL(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i, j;           for(i = pointH; i > pointL; i--) {             for(j = 0; j              strip.setPixelColor(i+j, c);             }            strip.show();   // write all the pixels out            delay(wait);            turnAllOff();            }   }  void chaseToCenter(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i, j, k;    i = pointL;    k = pointH;    while(i < k && k > i) {             for(j = 0; j < lineNumber; j++) {               strip.setPixelColor(i-j, c);               strip.setPixelColor(k+j, c);             }    strip.show();   // write all the pixels out    delay(wait);    i++;    k--;    turnAllOff();    }  }  void chasePastCenter(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i, j, k;    i = pointL;    k = pointH;    while(i < pointH && k > pointL) {             for(j = 0; j < lineNumber; j++) {               strip.setPixelColor(i-j, c);               strip.setPixelColor(k+j, c);             }    strip.show();   // write all the pixels out    delay(wait);    i++;    k--;    turnAllOff();    }  }  void turnAllOn(uint32_t c, uint32_t wait) {    int i;     for (i=0; i < strip.numPixels(); i++) {      strip.setPixelColor(i, c);  // turn all pixels on    }    strip.show();   // write all the pixels out    delay(wait);  }  void turnSegmentOn(uint32_t c, uint32_t wait, uint8_t startofseg, uint8_t endofseg) {    int i;     for (i=startofseg; i <= endofseg; i++) {      strip.setPixelColor(i, c);  // turn all pixels on    }    strip.show();   // write all the pixels out    delay(wait);  }  void fadeUpSeg(uint32_t r, uint32_t g, uint32_t b, uint32_t wait, uint8_t startofseg, uint8_t endofseg) {    int i, j;    for (j=0; j <= 100; j++) {      for (i=startofseg; i<=endofseg; i++) {        strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));      }    strip.show();    }    delay(wait);  }  void fadeDownSeg(uint32_t r, uint32_t g, uint32_t b, uint32_t wait, uint8_t startofseg, uint8_t endofseg) {    int i, j;    for (j=100; j >= 0; j--) {      for (i=startofseg; i<=endofseg; i++) {        strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));  // turn all pixels on      }    strip.show();    }    delay(wait);  }  void fadeUp(uint32_t r, uint32_t g, uint32_t b, uint32_t wait) {    int i, j;    for (j=0; j <= 100; j++) {      for (i=0; i < strip.numPixels(); i++) {        strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));      }    strip.show();    }    delay(wait);  }  void fadeDown(uint32_t r, uint32_t g, uint32_t b, uint32_t wait) {    int i, j;    for (j=100; j >= 0; j--) {      for (i=0; i < strip.numPixels(); i++) {        strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));  // turn all pixels on      }    strip.show();    }    delay(wait);  }  void chaseMultipleLinesLToH(uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i, j;           for(i = pointL; i <= pointH; i++) {             for(j = 0; j < lineNumber; j++) {               strip.setPixelColor(i, strip.Color(0,0,127));               strip.setPixelColor(i+j+(2*lineNumber), strip.Color(25,0,0));               strip.setPixelColor(i+j+(3*lineNumber), strip.Color(0,25,0));               strip.setPixelColor(i+j+(4*lineNumber), strip.Color(25,25,0));               strip.setPixelColor(i+j+(5*lineNumber), strip.Color(0,25,25));               strip.setPixelColor(i+j+(6*lineNumber), strip.Color(25,0,25));               strip.setPixelColor(i+j+(7*lineNumber), strip.Color(0,0,25));               strip.setPixelColor(i+j+(8*lineNumber), strip.Color(25,0,0));               strip.setPixelColor(i+j+(9*lineNumber), strip.Color(0,0,0));                           }           strip.show();   // write all the pixels out           delay(wait);           }   }  void turnAllOff() {    int i;     for (i=0; i < strip.numPixels(); i++) {      strip.setPixelColor(i, 0);  // turn all pixels off    }    strip.show();   // write all the pixels out  }  void randomSparkleUpSegment(uint32_t c, uint32_t density, uint8_t wait, uint8_t pointL, uint8_t pointH) {    int i,j,location;      for (j=pointL; j<=pointH; j++) {        for (i=0; i <= density; i++) {        location = random(pointL,j);        strip.setPixelColor(location, c);        }      strip.show();   // write all the pixels out      delay(wait);      turnAllOff();      strip.show();   // write all the pixels out      }   }  void randomSparkleUpStrip(uint32_t c, uint32_t density, uint8_t wait) {    int i,j,location;      for (j=density; j       for (i=0; i <= density; i++) {        location = random(0,j);        strip.setPixelColor(location, c);        }      strip.show();   // write all the pixels out      delay(wait);      turnAllOff();      strip.show();   // write all the pixels out      }   }  void randomSparkle(uint32_t c, uint32_t density, uint8_t wait) {    int i,j,location;    for (j=0; j < 200; j++) {        for (i=0; i <= density; i++) {           location = random(0,strip.numPixels()); //random location in first 5th of strip           strip.setPixelColor(location, c);        }      strip.show();   // write all the pixels out      delay(wait);      turnAllOff();      strip.show();   // write all the pixels out           }  }  void randomColorSparkle(uint8_t wait) {    int i;    int location1, location2, location3, location4, location5;    int color1, color2, color3;         for (i=0; i < 200; i++) {           location1 = random(0,32); //random location in first 5th of strip           location2 = random(33,64); //random location in 2nd 5th of strip           location3 = random(65,96); //random location in 3rd 5th of strip           location4 = random(97,128); //random location in 4th 5th of strip           location5 = random(129,159); //randon location in last 5th of strip                     color1 = random(25);           color2 = random(25);           color3 = random(25);                     strip.setPixelColor(location1, strip.Color(color1,color2,0));           strip.setPixelColor(location2, strip.Color(color3,0,color1));           strip.setPixelColor(location3, strip.Color(0,color2,color3));           strip.setPixelColor(location4, strip.Color(color1,color2,0));           strip.setPixelColor(location5, strip.Color(color3,0,color1));           strip.show();   // write all the pixels out           delay(wait);           strip.setPixelColor(location1, strip.Color(0,0,0));           strip.setPixelColor(location2, strip.Color(0,0,0));           strip.setPixelColor(location3, strip.Color(0,0,0));           strip.setPixelColor(location4, strip.Color(0,0,0));           strip.setPixelColor(location5, strip.Color(0,0,0));           strip.show();   // write all the pixels out           }  }  void twoColorSparkle(uint32_t c1, uint32_t c2, uint32_t density, uint8_t wait) {    int i,j,location1,location2;    for (j=0; j < 200; j++) {        for (i=0; i <= density; i++) {           location1 = random(0,strip.numPixels()); //random location number 1           location2 = random(0,strip.numPixels()); //random location number 2           strip.setPixelColor(location1, c1);           strip.setPixelColor(location2, c2);        }      strip.show();   // write all the pixels out      delay(wait);      turnAllOff();      strip.show();   // write all the pixels out           }  }  void rainbow(uint8_t wait) {    int i, j;        for (j=0; j < 384; j++) {     // 3 cycles of all 384 colors in the wheel      for (i=0; i < strip.numPixels(); i++) {        strip.setPixelColor(i, Wheel( (i + j) % 384));      }       strip.show();   // write all the pixels out      delay(wait);    }  }  // Slightly different, this one makes the rainbow wheel equally distributed  // along the chain  void rainbowCycle(uint8_t wait) {    uint16_t i, j;       for (j=0; j < 384 * 5; j++) {     // 5 cycles of all 384 colors in the wheel      for (i=0; i < strip.numPixels(); i++) {        // tricky math! we use each pixel as a fraction of the full 384-color wheel        // (thats the i / strip.numPixels() part)        // Then add in j which makes the colors go around per pixel        // the % 384 is to make the wheel cycle around        strip.setPixelColor(i, Wheel( ((i * 384 / strip.numPixels()) + j) % 384) );      }       strip.show();   // write all the pixels out      delay(wait);    }  }  // fill the dots one after the other with said color  // good for testing purposes  void colorWipe(uint32_t c, uint8_t wait) {    int i;       for (i=0; i < strip.numPixels(); i++) {        strip.setPixelColor(i, c);        strip.show();        delay(wait);    }  }  // Chase a dot down the strip  // good for testing purposes  void colorChase(uint32_t c, uint8_t wait) {    int i;       for (i=0; i < strip.numPixels(); i++) {      strip.setPixelColor(i, 0);  // turn all pixels off    }       for (i=0; i < strip.numPixels(); i++) {        strip.setPixelColor(i, c);        if (i == 0) {          strip.setPixelColor(strip.numPixels()-1, 0);        } else {          strip.setPixelColor(i-1, 0);        }        strip.show();        delay(wait);    }  }  /* Helper functions */  //Input a value 0 to 384 to get a color value.  //The colours are a transition r - g -b - back to r  uint32_t Wheel(uint16_t WheelPos)  {    byte r, g, b;    switch(WheelPos / 128)    {      case 0:        r = 25 - WheelPos % 128;   //Red down        g = WheelPos % 128;      // Green up        b = 0;                  //blue off        break;      case 1:        g = 25 - WheelPos % 128;  //green down        b = WheelPos % 128;      //blue up        r = 0;                  //red off        break;      case 2:        b = 25 - WheelPos % 128;  //blue down        r = WheelPos % 128;      //red up        g = 0;                  //green off        break;    }    return(strip.Color(r,g,b));  }",
      "html": "<div class=\"media_embed\"><iframe frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/XzTxnm8a0uU\" width=\"560\"></iframe><iframe frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/bwceJ74mw2M\" width=\"560\"></iframe><br><br><br><br><br>  #include \"LPD8806.h\"<br>  #include <br><br>  // Example to control LPD8806-based RGB LED Modules in a strip<br>  //digital in pin 11<br>  //clock in pin 13<br>  /*****************************************************************************/<br><br><br><br>  // The LED strips are 32 LEDs per meter but you can extend/cut the strip<br><br><br>  LPD8806 strip = LPD8806(32); // Set the first variable to the NUMBER of pixels. 32 = 32 pixels in a row<br><br>  void setup() {<br>  &nbsp; // Start up the LED strip<br>  &nbsp; strip.begin();<br><br>  &nbsp; // Update the strip, to start they are all 'off'<br>  &nbsp; strip.show();<br>  }<br><br><br>  void loop() {<br><br>  &nbsp; randomSparkleUpSegment(strip.Color(25,0,0),15,10,101,152); //color, density, delay, low point, high point<br>  &nbsp; turnSegmentOn(strip.Color(25,0,0),1000, 101, 152); //color, delay, start of segment, end of segment<br>  &nbsp; randomSparkleUpSegment(strip.Color(0,25,0),15,10,0,100); //color, density, delay, low point, high point<br>  &nbsp; turnSegmentOn(strip.Color(0,25,0),200,0,100); //color, delay, start of segment, end of segment<br>  &nbsp; delay(500);<br>  &nbsp; turnAllOff;<br>  &nbsp; fillUpTheStar(strip.Color(0,0,25),30); //color, delay<br>  &nbsp; fillUpCenterStar(strip.Color(0,0,25),30); //color, delay<br>  &nbsp; fillUpTheStar(strip.Color(25,0,0),30); //color, delay<br>  &nbsp; fillUpCenterStar(strip.Color(25,0,0),30); //color, delay<br>  &nbsp; fillUpTheStar(strip.Color(0,25,0),30); //color, delay<br>  &nbsp; fillUpCenterStar(strip.Color(0,25,0),30); //color, delay<br>  &nbsp; fillUpTheStar(strip.Color(25,25,25),30); //color, delay<br>  &nbsp; fillUpCenterStar(strip.Color(25,25,25),30); //color, delay<br>  &nbsp;<br>  &nbsp; turnAllOn(strip.Color(25,0,0),200); //color, delay - turn all pixels one color<br>  &nbsp; dither(strip.Color(0,25,0), 50); //color, delay - random fills up the strip<br>  &nbsp; fadeDown(0,25,0,30); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; dither(strip.Color(25,0,0), 50); //color, delay - random fills up the strip<br>  &nbsp; fadeDown(25,0,0,30); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp;&nbsp;&nbsp;<br>  &nbsp; turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(25,0,0),400); //color, delay - turn all pixels one color<br>  &nbsp; turnAllOn(strip.Color(0,25,0),400); //color, delay - turn all pixels one color<br>  &nbsp; chaseBetweenLToH(strip.Color(25,25,25),20,0,100); //color, delay, low, high - chase led between two locations progressing up the chain<br>  &nbsp; chaseBetweenHToL(strip.Color(25,25,25),20,103,152); //color, delay, low, high - chase led between two locations progressing down the chain<br>  &nbsp;<br>  &nbsp; turnAllOff(); //turn all pixels off<br>  &nbsp; fadeUp(25,0,0,20); //red, green, blue, delay - fade up all pixels one color<br>  &nbsp; fadeDown(25,0,0,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; fadeUp(0,25,0,20); //red, green, blue, delay - fade up all pixels one color<br>  &nbsp; fadeDown(0,25,0,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; turnAllOff();<br>  &nbsp;<br>  &nbsp; /// strobe effect r/g rg<br>  &nbsp; randomSparkle(strip.Color(25,0,0),20, 30); //color, density, delay - random sparkles in one color<br>  &nbsp; randomSparkle(strip.Color(0,25,0),20, 30); //color, density, delay - random sparkles in one color<br>  &nbsp; twoColorSparkle(strip.Color(25,0,0), strip.Color(0,25,0), 20, 10); //color 1, color 2, density, delay - random sparkles in two colors<br><br>  &nbsp; rainbow(20);<br>  &nbsp; turnAllOff();<br><br>  &nbsp; randomColorSparkle(30); //delay - random color sparkles<br>  &nbsp;<br>  &nbsp; turnAllOn(strip.Color(0,0,25),1000); //color, delay - turn all pixels one color<br>  &nbsp; chaseBetweenLToH(strip.Color(25,25,25),1,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain<br>  &nbsp; chaseBetweenLToH(strip.Color(0,25,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain<br>  &nbsp; chaseBetweenHToL(strip.Color(25,0,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing down the chain<br>  &nbsp; chaseBetweenHToL(strip.Color(0,25,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing down the chain<br>  &nbsp; chaseToCenter(strip.Color(25,0,0),25,1,0,159); //color, number of leds in line, delay, low, high - chase lines to the center<br>  &nbsp; chasePastCenter(strip.Color(25,0,0),25,1,0,159); //color, number of leds in line, delay, low, high - chase lines past the center<br>  &nbsp; chaseBetweenLToH(strip.Color(50,50,25),1,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain<br>  &nbsp; chaseBetweenLToH(strip.Color(25,0,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain<br>  &nbsp; chaseBetweenLToH(strip.Color(0,25,0),0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain<br>  &nbsp; chaseLineHToL(strip.Color(25,0,0),50,0,0,159); //color, number of leds in line, delay, low, high - chase leds in a line progressing up the chain<br>  &nbsp; chaseLineLToH(strip.Color(0,25,0),50,0,0,159); //color, delay, low, high - chase leds between two locations progressing up the chain<br>  &nbsp;<br>  &nbsp; rainbowCycle(0);&nbsp; // make it go through the cycle fairly fast<br>  &nbsp; turnAllOff();<br>  &nbsp;<br>  &nbsp; //red and green segments around perimeter, center blue<br>  &nbsp; int i;<br>  &nbsp; for(i=1; i&lt;=4; i++){<br><br>  &nbsp; delay(1000);<br>  &nbsp; fadeDown(25,25,25,40); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; }<br>  &nbsp;<br>  &nbsp; turnAllOn(strip.Color(0,0,25),200);<br>  &nbsp; dither(strip.Color(25,0,0), 20); //color, delay - random fills up the strip<br>  &nbsp; fadeDown(25,0,0,30); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp;<br>  &nbsp; turnSegmentOn(strip.Color(0,0,25),10,104,159); //color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,0,25),10,0,103); //color, delay, start of segment, end of segment&nbsp;&nbsp;<br>  &nbsp; chaseUpTheStar(strip.Color(25,0,0),30); //color, delay<br>  &nbsp; chaseUpCenterStar(strip.Color(25,0,0),30); //color, delay<br>  &nbsp; turnSegmentOn(strip.Color(0,25,0),10,0,159); //color, delay, start of segment, end of segment<br>  &nbsp; chaseUpTheStar(strip.Color(25,0,0),30); //color, delay<br>  &nbsp; turnAllOff();<br>  &nbsp;<br>  &nbsp; fillUpTheStar(strip.Color(25,0,0),30); //color, delay<br>  &nbsp; fillUpCenterStar(strip.Color(0,25,0), 30); //color, delay<br>  &nbsp; fillUpTheStar(strip.Color(0,25,0),30); //color, delay<br>  &nbsp; fillUpCenterStar(strip.Color(25,0,0),30); //color, delay<br>  &nbsp; fillUpTheStar(strip.Color(25,25,25),30); //color, delay<br>  &nbsp; fillUpCenterStar(strip.Color(25,25,25),30); //color, delay<br>  &nbsp;<br>  &nbsp; turnAllOff();<br>  &nbsp; dither(strip.Color(0,25,25), 10); //color, delay - random fills up the strip<br>  &nbsp; fadeDown(0,25,25,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; turnAllOff();<br>  &nbsp; scanner(25,0,0,10); //red, green, blue, delay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  &nbsp; turnAllOff();<br>  &nbsp; wave(strip.Color(25,0,0),5,0,200); //color, cycles, delay, repetitions<br>  &nbsp; fadeDown(25,0,0,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; wave(strip.Color(0,25,0),5,0,200); //color, cycles, delay, repetitions<br>  &nbsp; turnAllOff();<br>  &nbsp;<br>  &nbsp;<br>  &nbsp; randomSparkleUpStrip(strip.Color(25,25,25),15,10); //color, density, wait<br>  &nbsp; turnAllOn(strip.Color(25,25,25),500);<br>  &nbsp; fadeDown(25,25,25,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; randomSparkleUpStrip(strip.Color(20,20,25),15,10);<br>  &nbsp; turnAllOn(strip.Color(20,20,25),500);<br>  &nbsp; fadeDown(20,20,25,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; randomSparkleUpStrip(strip.Color(25,50,25),15,10);<br>  &nbsp; turnAllOn(strip.Color(25,50,25),500);<br>  &nbsp; fadeDown(25,50,25,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; randomSparkleUpStrip(strip.Color(20,25,39),15,10);<br>  &nbsp; turnAllOn(strip.Color(20,127,39),500);<br>  &nbsp; fadeDown(20,25,39,20); //red, green, blue, delay - fade down all pixels one color<br>  &nbsp; randomSparkleUpStrip(strip.Color(10,10,25),15,10);<br>  &nbsp; turnAllOn(strip.Color(10,10,25),500);<br>  &nbsp; fadeDown(10,10,25,20); //red, green, blue, delay - fade down all pixels one color<br><br>  &nbsp; turnAllOn(strip.Color(0,25,0),400);<br>  &nbsp; chaseBetweenLToH(strip.Color(25,0,0),20,0,100); //color, delay, low, high - chase led between two locations progressing up the chain<br>  &nbsp; chaseBetweenHToL(strip.Color(25,0,0),20,103,152); //color, delay, low, high - chase led between two locations progressing down the chain<br><br>  //green to red wave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  &nbsp; wave(strip.Color(0,25,0),5,0,100); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(20,25,0),10,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(40,25,0),15,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(80,25,0),20,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(25,25,0),25,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(25,80,0),35,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(25,40,0),35,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(25,20,0),35,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(25,0,0),35,0,100); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(25,0,0),35,0,50); //color, cycles, delay, repetitions<br>  &nbsp;<br>  &nbsp; turnAllOff();<br><br>  &nbsp; wave(strip.Color(0,25,0),35,0,100); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(20,107,0),35,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(40,87,0),35,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(80,47,0),30,0,50); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(107,27,0),20,0,100); //color, cycles, delay, repetitions<br>  &nbsp; wave(strip.Color(25,0,0),5,0,200); //color, cycles, delay, repetitions<br>  &nbsp;<br><br><br>  &nbsp; int j;<br>  &nbsp; for(j=1; j&lt;=15; j++){<br>  &nbsp; turnSegmentOn(strip.Color(0,0,25),0, 60, 100);//red 1 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,0,0),0, 147, 152); //blue 1 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,0,0),200, 103, 109); //blue 1 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,25,0),0, 44, 59); //red 4 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,25,0),0, 110, 121); //blue 4 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,0,25),0, 0, 15); //red 2 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,0,0),200, 135, 146); //blue 2 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,25,0),0, 60, 100); //red 1 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,25,0),0, 147, 152); // blue 1 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,25,0),0, 103, 109); //blue 1 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,0,25),0, 16, 43); //red 3 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,0,0),200, 122, 134); //blue 3 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,25,0),0, 0, 15); //red 2 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,25,0),0, 135, 146); //blue 2 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,0,25),0, 44, 59); //red 4 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,0,0),200, 110, 121); //blue 4 on - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(25,25,0),0, 16, 43); //red 3 off - color, delay, start of segment, end of segment<br>  &nbsp; turnSegmentOn(strip.Color(0,25,0),0, 122, 134); //blue 3 off - color, delay, start of segment, end of segment<br>  &nbsp; }<br>  &nbsp;<br><br>  &nbsp;<br>  &nbsp; chaseMultipleLinesLToH(10,10,0,152); //number of leds in line, delay, low, high - chase multiple lines progressing up the chain<br><br><br>  }<br><br>  // An \"ordered dither\" fills every pixel in a sequence that looks<br>  // sparkly and almost random, but actually follows a specific order.<br>  void dither(uint32_t c, uint8_t wait) {<br>  &nbsp; // Determine highest bit needed to represent pixel index<br>  &nbsp; int hiBit = 0;<br>  &nbsp; int n = strip.numPixels() - 1;<br>  &nbsp; for(int bit=1; bit &lt; 0x8000; bit &lt;&lt;= 1) {<br>  &nbsp;&nbsp;&nbsp; if(n &amp; bit) hiBit = bit;<br>  &nbsp; }<br>  &nbsp; int bit, reverse;<br>  &nbsp; for(int i=0; i&lt;(hiBit &lt;&lt; 1); i++) {<br>  &nbsp;&nbsp;&nbsp; // Reverse the bits in i to create ordered dither:<br>  &nbsp;&nbsp;&nbsp; reverse = 0;<br>  &nbsp;&nbsp;&nbsp; for(bit=1; bit &lt;= hiBit; bit &lt;&lt;= 1) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reverse &lt;&lt;= 1;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(i &amp; bit) reverse |= 1;<br>  &nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(reverse, c);<br>  &nbsp;&nbsp;&nbsp; strip.show();<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp; }<br>  &nbsp; delay(250); // Hold image for 1/4 sec<br>  }<br><br>  // \"Larson scanner\" = Cylon/KITT bouncing light effect<br>  void scanner(uint8_t r, uint8_t g, uint8_t b, uint8_t wait) {<br>  &nbsp; int i, j, pos, dir;<br>  &nbsp; pos = 0;<br>  &nbsp; dir = 1;<br>  &nbsp; for(i=0; i&lt;((strip.numPixels()-1) * 8); i++) {<br>  &nbsp;&nbsp;&nbsp; // Draw 5 pixels centered on pos. setPixelColor() will clip<br>  &nbsp;&nbsp;&nbsp; // any pixels off the ends of the strip, no worries there.<br>  &nbsp;&nbsp;&nbsp; // we'll make the colors dimmer at the edges for a nice pulse<br>  &nbsp;&nbsp;&nbsp; // look<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(pos - 2, strip.Color(r/4, g/4, b/4));<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(pos - 1, strip.Color(r/2, g/2, b/2));<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(pos, strip.Color(r, g, b));<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(pos + 1, strip.Color(r/2, g/2, b/2));<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(pos + 2, strip.Color(r/4, g/4, b/4));<br><br>  &nbsp;&nbsp;&nbsp; strip.show();<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp; // If we wanted to be sneaky we could erase just the tail end<br>  &nbsp;&nbsp;&nbsp; // pixel, but it's much easier just to erase the whole thing<br>  &nbsp;&nbsp;&nbsp; // and draw a new one next time.<br>  &nbsp;&nbsp;&nbsp; for(j=-2; j&lt;= 2; j++)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(pos+j, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp; // Bounce off ends of strip<br>  &nbsp;&nbsp;&nbsp; pos += dir;<br>  &nbsp;&nbsp;&nbsp; if(pos &lt; 0) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = 1;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dir = -dir;<br>  &nbsp;&nbsp;&nbsp; } else if(pos &gt;= strip.numPixels()) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = strip.numPixels() - 2;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dir = -dir;<br>  &nbsp;&nbsp;&nbsp; }<br>  &nbsp; }<br>  }<br><br>  // Sine wave effect<br>  #define PI 3.14159265<br>  void wave(uint32_t c, int cycles, uint8_t wait, int repetitions) {<br>  &nbsp; float y;<br>  &nbsp; byte r, g, b, r2, g2, b2;<br>  &nbsp; // Need to decompose color into its r, g, b elements<br>  &nbsp; g = (c &gt;&gt; 16) &amp; 0x7f;<br>  &nbsp; r = (c &gt;&gt; 8) &amp; 0x7f;<br>  &nbsp; b = c &amp; 0x7f;<br>  &nbsp; for(int x=0; x &nbsp; {<br>  &nbsp;&nbsp;&nbsp; for(int i=0; i &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = sin(PI * (float)cycles * (float)(x + i) / (float)strip.numPixels());<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = 1.0 - y; // Translate Y to 0.0 (top) to 1.0 (center)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r2 = (byte)((float)r * y);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g2 = (byte)((float)g * y);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b2 = (byte)((float)b * y);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, r2, g2, b2);<br>  &nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp; strip.show();<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp; }<br>  }<br><br>  void chaseUpTheStar(uint32_t c, uint8_t wait) {<br>  &nbsp; int i,j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = 1; i &lt;= 20; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80+i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80-i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80+i, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80-i, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (j=0; j&lt;=29; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(59-j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(j, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(59-j, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void chaseUpCenterStar(uint32_t c, uint8_t wait) {<br>  &nbsp; int i,j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = 1; i &lt;= 6; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(146+i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(147-i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(146+i, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(147-i, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (j=0; j&lt;=18; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(103+j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(140-j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(103+j, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(140-j, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br>  void fillUpTheStar(uint32_t c, uint8_t wait) {<br>  &nbsp; int i,j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = 1; i &lt;= 20; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80+i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(80-i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (j=0; j&lt;=29; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(59-j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void fillUpCenterStar(uint32_t c, uint8_t wait) {<br>  &nbsp; int i,j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = 1; i &lt;= 6; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(146+i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(147-i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (j=0; j&lt;=18; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(103+j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(140-j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void chaseBetweenLToH(uint32_t c, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = pointL; i &lt;= pointH; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void chaseBetweenHToL(uint32_t c, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = pointH; i &gt;= pointL; i--) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void chaseLineLToH(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i, j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(i = pointL; i &lt; pointH+lineNumber; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j = 0; j &lt; lineNumber; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i-j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; turnAllOff();<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void chaseLineHToL(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i, j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(i = pointH; i &gt; pointL; i--) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j = 0; j &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; turnAllOff();<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void chaseToCenter(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i, j, k;<br>  &nbsp; i = pointL;<br>  &nbsp; k = pointH;<br>  &nbsp; while(i &lt; k &amp;&amp; k &gt; i) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j = 0; j &lt; lineNumber; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i-j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(k+j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp; delay(wait);<br>  &nbsp; i++;<br>  &nbsp; k--;<br>  &nbsp; turnAllOff();<br>  &nbsp; }<br>  }<br><br>  void chasePastCenter(uint32_t c, uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i, j, k;<br>  &nbsp; i = pointL;<br>  &nbsp; k = pointH;<br>  &nbsp; while(i &lt; pointH &amp;&amp; k &gt; pointL) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j = 0; j &lt; lineNumber; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i-j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(k+j, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp; delay(wait);<br>  &nbsp; i++;<br>  &nbsp; k--;<br>  &nbsp; turnAllOff();<br>  &nbsp; }<br>  }<br><br>  void turnAllOn(uint32_t c, uint32_t wait) {<br>  &nbsp; int i;&nbsp;<br>  &nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(i, c);&nbsp; // turn all pixels on<br>  &nbsp; }<br>  &nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp; delay(wait);<br>  }<br><br>  void turnSegmentOn(uint32_t c, uint32_t wait, uint8_t startofseg, uint8_t endofseg) {<br>  &nbsp; int i;&nbsp;<br>  &nbsp; for (i=startofseg; i &lt;= endofseg; i++) {<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(i, c);&nbsp; // turn all pixels on<br>  &nbsp; }<br>  &nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp; delay(wait);<br>  }<br><br><br>  void fadeUpSeg(uint32_t r, uint32_t g, uint32_t b, uint32_t wait, uint8_t startofseg, uint8_t endofseg) {<br>  &nbsp; int i, j;<br>  &nbsp; for (j=0; j &lt;= 100; j++) {<br>  &nbsp;&nbsp;&nbsp; for (i=startofseg; i&lt;=endofseg; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));<br>  &nbsp;&nbsp;&nbsp; }<br>  &nbsp; strip.show();<br>  &nbsp; }<br>  &nbsp; delay(wait);<br>  }<br><br>  void fadeDownSeg(uint32_t r, uint32_t g, uint32_t b, uint32_t wait, uint8_t startofseg, uint8_t endofseg) {<br>  &nbsp; int i, j;<br>  &nbsp; for (j=100; j &gt;= 0; j--) {<br>  &nbsp;&nbsp;&nbsp; for (i=startofseg; i&lt;=endofseg; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));&nbsp; // turn all pixels on<br>  &nbsp;&nbsp;&nbsp; }<br>  &nbsp; strip.show();<br>  &nbsp; }<br>  &nbsp; delay(wait);<br>  }<br><br>  void fadeUp(uint32_t r, uint32_t g, uint32_t b, uint32_t wait) {<br>  &nbsp; int i, j;<br>  &nbsp; for (j=0; j &lt;= 100; j++) {<br>  &nbsp;&nbsp;&nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));<br>  &nbsp;&nbsp;&nbsp; }<br>  &nbsp; strip.show();<br>  &nbsp; }<br>  &nbsp; delay(wait);<br>  }<br><br>  void fadeDown(uint32_t r, uint32_t g, uint32_t b, uint32_t wait) {<br>  &nbsp; int i, j;<br>  &nbsp; for (j=100; j &gt;= 0; j--) {<br>  &nbsp;&nbsp;&nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, strip.Color((r*j)/100,(g*j)/100,(b*j)/100));&nbsp; // turn all pixels on<br>  &nbsp;&nbsp;&nbsp; }<br>  &nbsp; strip.show();<br>  &nbsp; }<br>  &nbsp; delay(wait);<br>  }<br><br>  void chaseMultipleLinesLToH(uint8_t lineNumber, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i, j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(i = pointL; i &lt;= pointH; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j = 0; j &lt; lineNumber; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, strip.Color(0,0,127));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(2*lineNumber), strip.Color(25,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(3*lineNumber), strip.Color(0,25,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(4*lineNumber), strip.Color(25,25,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(5*lineNumber), strip.Color(0,25,25));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(6*lineNumber), strip.Color(25,0,25));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(7*lineNumber), strip.Color(0,0,25));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(8*lineNumber), strip.Color(25,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i+j+(9*lineNumber), strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void turnAllOff() {<br>  &nbsp; int i;&nbsp;<br>  &nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(i, 0);&nbsp; // turn all pixels off<br>  &nbsp; }<br>  &nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  }<br><br>  void randomSparkleUpSegment(uint32_t c, uint32_t density, uint8_t wait, uint8_t pointL, uint8_t pointH) {<br>  &nbsp; int i,j,location;<br>  &nbsp;&nbsp;&nbsp; for (j=pointL; j&lt;=pointH; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0; i &lt;= density; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location = random(pointL,j);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp; turnAllOff();<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void randomSparkleUpStrip(uint32_t c, uint32_t density, uint8_t wait) {<br>  &nbsp; int i,j,location;<br>  &nbsp;&nbsp;&nbsp; for (j=density; j &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0; i &lt;= density; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location = random(0,j);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp; turnAllOff();<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; }&nbsp;<br>  }<br><br>  void randomSparkle(uint32_t c, uint32_t density, uint8_t wait) {<br>  &nbsp; int i,j,location;<br>  &nbsp; for (j=0; j &lt; 200; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0; i &lt;= density; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location = random(0,strip.numPixels()); //random location in first 5th of strip<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp; turnAllOff();<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  }<br><br>  void randomColorSparkle(uint8_t wait) {<br>  &nbsp; int i;<br>  &nbsp; int location1, location2, location3, location4, location5;<br>  &nbsp; int color1, color2, color3;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0; i &lt; 200; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location1 = random(0,32); //random location in first 5th of strip<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location2 = random(33,64); //random location in 2nd 5th of strip<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location3 = random(65,96); //random location in 3rd 5th of strip<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location4 = random(97,128); //random location in 4th 5th of strip<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location5 = random(129,159); //randon location in last 5th of strip<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color1 = random(25);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color2 = random(25);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color3 = random(25);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location1, strip.Color(color1,color2,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location2, strip.Color(color3,0,color1));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location3, strip.Color(0,color2,color3));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location4, strip.Color(color1,color2,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location5, strip.Color(color3,0,color1));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location1, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location2, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location3, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location4, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location5, strip.Color(0,0,0));<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  }<br><br>  void twoColorSparkle(uint32_t c1, uint32_t c2, uint32_t density, uint8_t wait) {<br>  &nbsp; int i,j,location1,location2;<br>  &nbsp; for (j=0; j &lt; 200; j++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0; i &lt;= density; i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location1 = random(0,strip.numPixels()); //random location number 1<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location2 = random(0,strip.numPixels()); //random location number 2<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location1, c1);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(location2, c2);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp;&nbsp;&nbsp; turnAllOff();<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  }<br><br>  void rainbow(uint8_t wait) {<br>  &nbsp; int i, j;<br>  &nbsp;&nbsp;<br>  &nbsp; for (j=0; j &lt; 384; j++) {&nbsp;&nbsp;&nbsp;&nbsp; // 3 cycles of all 384 colors in the wheel<br>  &nbsp;&nbsp;&nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, Wheel( (i + j) % 384));<br>  &nbsp;&nbsp;&nbsp; }&nbsp;<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp; }<br>  }<br><br>  // Slightly different, this one makes the rainbow wheel equally distributed<br>  // along the chain<br>  void rainbowCycle(uint8_t wait) {<br>  &nbsp; uint16_t i, j;<br>  &nbsp;<br>  &nbsp; for (j=0; j &lt; 384 * 5; j++) {&nbsp;&nbsp;&nbsp;&nbsp; // 5 cycles of all 384 colors in the wheel<br>  &nbsp;&nbsp;&nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // tricky math! we use each pixel as a fraction of the full 384-color wheel<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // (thats the i / strip.numPixels() part)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Then add in j which makes the colors go around per pixel<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the % 384 is to make the wheel cycle around<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, Wheel( ((i * 384 / strip.numPixels()) + j) % 384) );<br>  &nbsp;&nbsp;&nbsp; }&nbsp;<br>  &nbsp;&nbsp;&nbsp; strip.show();&nbsp;&nbsp; // write all the pixels out<br>  &nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp; }<br>  }<br><br>  // fill the dots one after the other with said color<br>  // good for testing purposes<br>  void colorWipe(uint32_t c, uint8_t wait) {<br>  &nbsp; int i;<br>  &nbsp;<br>  &nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp; }<br>  }<br><br>  // Chase a dot down the strip<br>  // good for testing purposes<br>  void colorChase(uint32_t c, uint8_t wait) {<br>  &nbsp; int i;<br>  &nbsp;<br>  &nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp; strip.setPixelColor(i, 0);&nbsp; // turn all pixels off<br>  &nbsp; }<br>  &nbsp;<br>  &nbsp; for (i=0; i &lt; strip.numPixels(); i++) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i, c);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i == 0) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(strip.numPixels()-1, 0);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.setPixelColor(i-1, 0);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strip.show();<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay(wait);<br>  &nbsp; }<br>  }<br><br>  /* Helper functions */<br><br>  //Input a value 0 to 384 to get a color value.<br>  //The colours are a transition r - g -b - back to r<br><br>  uint32_t Wheel(uint16_t WheelPos)<br>  {<br>  &nbsp; byte r, g, b;<br>  &nbsp; switch(WheelPos / 128)<br>  &nbsp; {<br>  &nbsp;&nbsp;&nbsp; case 0:<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r = 25 - WheelPos % 128;&nbsp;&nbsp; //Red down<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g = WheelPos % 128;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Green up<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //blue off<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>  &nbsp;&nbsp;&nbsp; case 1:<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g = 25 - WheelPos % 128;&nbsp; //green down<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = WheelPos % 128;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //blue up<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //red off<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>  &nbsp;&nbsp;&nbsp; case 2:<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = 25 - WheelPos % 128;&nbsp; //blue down<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r = WheelPos % 128;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //red up<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //green off<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>  &nbsp; }<br>  &nbsp; return(strip.Color(r,g,b));<br>  }<br>  &nbsp;</div>"
    }
  ],
  "author": {
    "name": "wirenut1980",
    "image": "https://content.instructables.com/FUI/3MY7/GZ0JI8SN/FUI3MY7GZ0JI8SN.jpg?auto=webp&crop=1%3A1&frame=1&width=130",
    "url": "https://www.instructables.com/member/wirenut1980/"
  }
},
{
  "type": "project",
  "url": "https://www.instructables.com/How-to-build-an-Air-Guitar-with-Arduino-aka-the-A",
  "title": "How to Build an Air Guitar With Arduino, Aka the AIRduino Guitar",
  "isFeatured": false,
  "numberOfViews": 38066,
  "numberOfLikes": 96,
  "numberOfComments": 29,
  "categories": [
    "Circuits",
    "Arduino"
  ],
  "steps": [
    {
      "title": "Introduction: How to Build an Air Guitar With Arduino, Aka the AIRduino Guitar",
      "media": [
        {
          "src": "https://content.instructables.com/FZY/1LWU/G145JNO9/FZY1LWUG145JNO9.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "How to Build an Air Guitar With Arduino, Aka the AIRduino Guitar"
        },
        {
          "src": "https://content.instructables.com/FO3/0LXE/G145JNO8/FO30LXEG145JNO8.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "How to Build an Air Guitar With Arduino, Aka the AIRduino Guitar"
        },
        {
          "src": "https://content.instructables.com/F6J/NU1C/G145JNO7/F6JNU1CG145JNO7.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "How to Build an Air Guitar With Arduino, Aka the AIRduino Guitar"
        }
      ],
      "body": "<!-- /* Font Definitions */ @font-face\t{font-family:SimSun;\tpanose-1:2 1 6 0 3 1 1 1 1 1;\tmso-font-alt:�S;\tmso-font-charset:134;\tmso-generic-font-family:auto;\tmso-font-pitch:variable;\tmso-font-signature:3 135135232 16 0 262145 0;}@font-face\t{font-family:'@SimSun';\tpanose-1:2 1 6 0 3 1 1 1 1 1;\tmso-font-charset:134;\tmso-generic-font-family:auto;\tmso-font-pitch:variable;\tmso-font-signature:3 135135232 16 0 262145 0;} /* Style Definitions */ p.MsoNormal, li.MsoNormal, div.MsoNormal\t{mso-style-parent:'';\tmargin:0cm;\tmargin-bottom:.0001pt;\tmso-pagination:widow-orphan;\tfont-size:12.0pt;\tfont-family:'Times New Roman';\tmso-fareast-font-family:SimSun;}@page Section1\t{size:595.3pt 841.9pt;\tmargin:70.85pt 70.85pt 70.85pt 70.85pt;\tmso-header-margin:35.4pt;\tmso-footer-margin:35.4pt;\tmso-paper-source:0;}div.Section1\t{page:Section1;}-->The idea here is to build a wearable virtual guitar that is to be controlled with two hands much like playing Air Guitar. It has been created and prototyped during a two weeks project at ChalmersUniversity (Sweden) for a Physical Computing class.The aim is to get the feeling of playing a real guitar. The AIRduino Guitar is made of one glove and one stick. The glove is used to set the tone and the stick to trigger the sound.To perform such trick, we used an accelerometer and an ultra-sonic sensor (see Step 1 for concept description).Take a look at the video demo to get a more precise idea of how it works, and get to work to build your own!The AIRduino Team:David Fournier, Jean-Louis Giordano, Monireh Sanaei, Maziar Shelbaf and Gustav Sohtell.",
      "html": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"ProgId\" content=\"Word.Document\"><meta name=\"Generator\" content=\"Microsoft Word 11\"><meta name=\"Originator\" content=\"Microsoft Word 11\"><link rel=\"File-List\" href=\"file:///C:DOCUME~1JEAN-L~1LOCALS~1Tempmsohtml1\u0001clip_filelist.xml\"><o:smarttagtype namespaceuri=\"urn:schemas-microsoft-com:office:smarttags\" name=\"country-region\"></o:smarttagtype><o:smarttagtype namespaceuri=\"urn:schemas-microsoft-com:office:smarttags\" name=\"PlaceType\"></o:smarttagtype><o:smarttagtype namespaceuri=\"urn:schemas-microsoft-com:office:smarttags\" name=\"PlaceName\"></o:smarttagtype><o:smarttagtype namespaceuri=\"urn:schemas-microsoft-com:office:smarttags\" name=\"place\"></o:smarttagtype><!--[if gte mso 9]><xml><w:WordDocument><w:View>Normal</w:View><w:Zoom>0</w:Zoom><w:HyphenationZone>21</w:HyphenationZone><w:PunctuationKerning /><w:ValidateAgainstSchemas /><w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid><w:IgnoreMixedContent>false</w:IgnoreMixedContent><w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText><w:Compatibility><w:BreakWrappedTables /><w:SnapToGridInCell /><w:WrapTextWithPunct /><w:UseAsianBreakRules /><w:DontGrowAutofit /><w:UseFELayout /></w:Compatibility><w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel></w:WordDocument></xml><![endif]--><!--[if gte mso 9]><xml><w:LatentStyles DefLockedState='false' LatentStyleCount='156'></w:LatentStyles></xml><![endif]--><!--[if !mso]><objectclassid='clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D' id=ieooui></object><style>st1:*{behavior:url(#ieooui) }</style><![endif]--><style type=\"text/css\"><!-- /* Font Definitions */ @font-face\t{font-family:SimSun;\tpanose-1:2 1 6 0 3 1 1 1 1 1;\tmso-font-alt:�S;\tmso-font-charset:134;\tmso-generic-font-family:auto;\tmso-font-pitch:variable;\tmso-font-signature:3 135135232 16 0 262145 0;}@font-face\t{font-family:'@SimSun';\tpanose-1:2 1 6 0 3 1 1 1 1 1;\tmso-font-charset:134;\tmso-generic-font-family:auto;\tmso-font-pitch:variable;\tmso-font-signature:3 135135232 16 0 262145 0;} /* Style Definitions */ p.MsoNormal, li.MsoNormal, div.MsoNormal\t{mso-style-parent:'';\tmargin:0cm;\tmargin-bottom:.0001pt;\tmso-pagination:widow-orphan;\tfont-size:12.0pt;\tfont-family:'Times New Roman';\tmso-fareast-font-family:SimSun;}@page Section1\t{size:595.3pt 841.9pt;\tmargin:70.85pt 70.85pt 70.85pt 70.85pt;\tmso-header-margin:35.4pt;\tmso-footer-margin:35.4pt;\tmso-paper-source:0;}div.Section1\t{page:Section1;}--></style><!--[if gte mso 10]><style>/* Style Definitions */table.MsoNormalTable{mso-style-name:'Tableau Normal';mso-tstyle-rowband-size:0;mso-tstyle-colband-size:0;mso-style-noshow:yes;mso-style-parent:'';mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-para-margin:0cm;mso-para-margin-bottom:.0001pt;mso-pagination:widow-orphan;font-size:10.0pt;font-family:'Times New Roman';mso-fareast-font-family:'Times New Roman';mso-ansi-language:#0400;mso-fareast-language:#0400;mso-bidi-language:#0400;}</style><![endif]--><p class=\"MsoNormal\"><span lang=\"EN-GB\" style=\"\">The idea here is to build a wearable virtual guitar that is to be controlled with two hands much like playing Air Guitar. It has been created and prototyped during a two weeks project at <st1:placename w:st=\"on\">Chalmers</st1:placename><st1:placetype w:st=\"on\">University</st1:placetype> (<st1:country-region w:st=\"on\"><st1:place w:st=\"on\">Sweden</st1:place></st1:country-region>) for a Physical Computing class.<o:p></o:p></span><span lang=\"EN-GB\" style=\"\"><o:p><br></o:p></span></p><p class=\"MsoNormal\"><span lang=\"EN-GB\" style=\"\">The aim is to get the feeling of playing a real guitar. The AIRduino Guitar is made of one glove and one stick. The glove is used to set the tone and the stick to trigger the sound.<o:p></o:p></span><span lang=\"EN-GB\" style=\"\"><o:p><br></o:p></span></p><p class=\"MsoNormal\"><span lang=\"EN-GB\" style=\"\">To perform such trick, we used an accelerometer and an ultra-sonic sensor (see Step 1 for concept description).<o:p></o:p></span><span lang=\"EN-GB\" style=\"\"><o:p><br></o:p></span></p><p class=\"MsoNormal\"><span lang=\"EN-GB\" style=\"\">Take a look at the video demo to get a more precise idea of how it works, and get to work to build your own!<o:p></o:p></span><span lang=\"EN-GB\" style=\"\"><o:p><br><br><object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http://www.youtube.com/v/sJxM18o9EPs&amp;hl=fr&amp;fs=1&amp;\"><param name=\"allowFullScreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><embed width=\"425\" height=\"344\" src=\"http://www.youtube.com/v/sJxM18o9EPs&amp;hl=fr&amp;fs=1&amp;\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></object><br></o:p></span></p><p class=\"MsoNormal\"><span lang=\"EN-GB\" style=\"\">The AIRduino Team:<o:p></o:p></span></p><p class=\"MsoNormal\"><span lang=\"EN-GB\" style=\"\">David Fournier, Jean-Louis Giordano, Monireh Sanaei, Maziar Shelbaf and Gustav Sohtell.<o:p></o:p></span></p>"
    },
    {
      "title": "Step 1: Concept Description",
      "media": [
        {
          "src": "https://content.instructables.com/FL9/MYC0/G145S6OY/FL9MYC0G145S6OY.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Concept Description"
        }
      ],
      "body": "The Air Guitar is supposed to work as a right-handed guitar.The guitar controller is divided in two parts, left-hand controller and right-hand controller.By left-hand controller the player can bend his fingers and press the glove to change the pitch of the tone.The right-hand controller is represented by a stick which has to be shaken to trigger the sound of the air-guitar.Player can also change the distance between right hand and left hand in order to pitch the tones, simulating the different frets on the guitar neck.To perform such tricks, the main components are an accelerometer to \"feel\" the stick shake, an hacked ultra-sonic sensor to measure the distance between the right hand and the stick, and conductive fabric to build the glove.All in all, it is an fairly easy to build toy. The only tricky part would be the ultra-sonic sensor hack which requires some dexterity. You will need some basic electronic skills to understand the instructions, and also to find out what you did wrong when you messed something up and the guitar doesn't work in the end. We have been there. :-)",
      "html": "The Air Guitar is supposed to work as a right-handed guitar.<br><br>The guitar controller is divided in two parts, left-hand controller and right-hand controller.<br>By left-hand controller the player can bend his fingers and press the glove to change the pitch of the tone.<br><br>The right-hand controller is represented by a stick which has to be shaken to trigger the sound of the air-guitar.<br><br>Player can also change the distance between right hand and left hand in order to pitch the tones, simulating the different frets on the guitar neck.<br><br>To perform such tricks, the main components are an accelerometer to \"feel\" the stick shake, an hacked ultra-sonic sensor to measure the distance between the right hand and the stick, and conductive fabric to build the glove.<br><br>All in all, it is an fairly easy to build toy. The only tricky part would be the ultra-sonic sensor hack which requires some dexterity. You will need some basic electronic skills to understand the instructions, and also to find out what you did wrong when you messed something up and the guitar doesn't work in the end. We have been there. :-)<br><br>"
    },
    {
      "title": "Step 2: Shopping List",
      "media": [],
      "body": "Here is a list of what you need to build your own AIRduino Guitar:1. Wires: unfortunately a lot for this prototype version. They have been used to connect the two gloves and the Arduino parts together. Feel free to improve this part of the design by making it wireless!2. Accelerometer: used in the stick in your right hand to detect the shaking. We used a three-axis accellerometer, but a one-axis is enough3. Ultrasonic sensor: used to measure the distance between both hands of the player, we used Parallax #280154. Conductive and Stretch fabric: to build the glove,5. Arduino: the core of the Guitar that handles everything. An Arduino Diecimila works fine.6. Potentiometers: to adjust some settings, A potentiometer with a max of anything from 1KOhm-1MOhm is ok.7. Hot melt glue: a convenient way to hold things together,8. 3.5 mm female jack: used for the audio output,9. Classic electronic stuff: Resistors (10k), capacitor(10uF), LEDs and some kind of power supply for the arduino. (A 9V battery is just fine).",
      "html": "Here is a list of what you need to build your own AIRduino Guitar:<br><br>1. Wires: unfortunately a lot for this prototype version. They have been used to connect the two gloves and the Arduino parts together. Feel free to improve this part of the design by making it wireless!<br><br>2. Accelerometer: used in the stick in your right hand to detect the shaking. We used a three-axis accellerometer, but a one-axis is enough<br><br>3. Ultrasonic sensor: used to measure the distance between both hands of the player, we used Parallax #28015<br><br>4. Conductive and Stretch fabric: to build the glove,<br><br>5. Arduino: the core of the Guitar that handles everything. An Arduino Diecimila works fine.<br><br>6. Potentiometers: to adjust some settings, A potentiometer with a max of anything from 1KOhm-1MOhm is ok.<br><br>7. Hot melt glue: a convenient way to hold things together,<br><br>8. 3.5 mm female jack: used for the audio output,<br><br>9. Classic electronic stuff: Resistors (10k), capacitor(10uF), LEDs and some kind of power supply for the arduino. (A&nbsp;9V battery is just fine).<br><br>"
    },
    {
      "title": "Step 3: Schematics",
      "media": [
        {
          "src": "https://content.instructables.com/FLB/59UJ/G1ZGOKEX/FLB59UJG1ZGOKEX.png?auto=webp&fit=bounds&frame=1&width=1024auto=webp&frame=1&height=300",
          "alt": "Schematics"
        },
        {
          "src": "https://content.instructables.com/FOP/9DWI/G145S6JI/FOP9DWIG145S6JI.png?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Schematics"
        },
        {
          "src": "https://content.instructables.com/FOU/V87F/G1VDTHEM/FOUV87FG1VDTHEM.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Schematics"
        }
      ],
      "body": "Here are the electronic schematics for the AIRduino Guitar.As you can see, it is pretty easy to understand and therefore also to build.Look at the image if you want an idea of which component goes where. As you probably understand, this is no to scale in any way. The cables are much longer than shown in the schematic.You might also have noticed that the emitter of the ultra-sonic sensor is on the stick and the receiver is on the left hand. That is the tricky part I have mentioned earlier: You must unsolder the ultra-sonic emitter from the ultra-sonic sensor unit in order to separate it from the sensor board.More about that in later steps. Now let's get to work!",
      "html": "Here are the electronic schematics for the AIRduino Guitar.<br><br>As you can see, it is pretty easy to understand and therefore also to build.<br><br>Look at the image if you want an idea of which component goes where. As you probably understand, this is no to scale in any way. The cables are much longer than shown in the schematic.<br><br>You might also have noticed that the emitter of the ultra-sonic sensor is on the stick and the receiver is on the left hand. That is the tricky part I have mentioned earlier: You must unsolder the ultra-sonic emitter from the ultra-sonic sensor unit in order to separate it from the sensor board.<br><br>More about that in later steps. Now let's get to work!<br><br>"
    },
    {
      "title": "Step 4: Building the Glove",
      "media": [
        {
          "src": "https://content.instructables.com/FSC/6O2R/G145UAP8/FSC6O2RG145UAP8.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Building the Glove"
        },
        {
          "src": "https://content.instructables.com/FAT/NMF7/G1M25O7K/FATNMF7G1M25O7K.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Building the Glove"
        },
        {
          "src": "https://content.instructables.com/FW8/8CGZ/G1M25O7J/FW88CGZG1M25O7J.jpg?auto=webp&fit=bounds&frame=1auto=webp&frame=1&height=300",
          "alt": "Building the Glove"
        },
        {
          "src": "https://content.instructables.com/FTV/X0HP/G1VDTH7L/FTVX0HPG1VDTH7L.jpg?auto=webp&fit=bounds&frame=1&height=1024&width=1024auto=webp&frame=1&height=300",
          "alt": "Building the Glove"
        }
      ],
      "body": "The glove contains one ultra-sonic receiver and four buttons. That's it!The ultra-sonic receiver is located in the black box visible on some of the pictures below.The glove has one large area which is just connected to ground on the Arduino board. When a finger is pressed against the palm a connection between the conductive fabric on the finger and the palm is created.Below are picture of two different glove models. One has detachable fingers, which allows both players with very small and very large hands. The other model is sewed right on to a standard glove. I'd recommend the second version, it is easier to build, and easier to put on.",
      "html": "The glove contains one ultra-sonic receiver and four buttons. That's it!<br><br>The ultra-sonic receiver is located in the black box visible on some of the pictures below.<br>The glove has one large area which is just connected to ground on the Arduino board. When a finger is pressed against the palm a connection between the conductive fabric on the finger and the palm is created.<br><br>Below are picture of two different glove models. One has detachable fingers, which allows both players with very small and very large hands.&nbsp;The other model is sewed right on to a standard glove. I'd recommend the second version, it is easier to build, and easier to put on.<br><br>"
    },
    {
      "title": "Step 5: Code",
      "media": [
        {
          "src": "https://content.instructables.com/static/image/file.default.gif",
          "alt": "download {{ file.name }}"
        }
      ],
      "body": "Here is the Arduino code required:The real-time sound generation part is taken from this great tutorial.------------------------------------------------------// An array containing the waveform// of a guitar soundchar waveform[] ={125, 148, 171, 194, 209, 230, 252, 255,253, 244, 235, 223, 207, 184, 169, 167,163, 158, 146, 131, 126, 129, 134, 127,105, 80, 58, 51,38, 22, 12,  2, 10, 35,58, 75, 89, 103, 120, 141, 150, 148, 145,144, 140, 129, 116, 105, 95, 86, 75, 72,73, 76, 88, 103, 117, 121, 120, 115, 120,143, 159, 162, 156, 155, 163, 184, 202,214, 215, 211, 213, 212, 205, 196, 182,162, 142, 118, 99, 84, 68, 54, 40, 28,19, 10,  7,  0,  0,  5,  9, 14, 21, 33,49, 59, 65, 75, 92, 110};// We use this waveform to change the// volume of the outputchar waveformVolume[] ={125, 148, 171, 194, 209, 230, 252, 255,253, 244, 235, 223, 207, 184, 169, 167,163, 158, 146, 131, 126, 129, 134, 127,105, 80, 58, 51,38, 22, 12,  2, 10, 35,58, 75, 89, 103, 120, 141, 150, 148, 145,144, 140, 129, 116, 105, 95, 86, 75, 72,73, 76, 88, 103, 117, 121, 120, 115, 120,143, 159, 162, 156, 155, 163, 184, 202,214, 215, 211, 213, 212, 205, 196, 182,162, 142, 118, 99, 84, 68, 54, 40, 28,19, 10,  7,  0,  0,  5,  9, 14, 21, 33,49, 59, 65, 75, 92, 110};// An array used as a buffer to avoid// erroneous punctual distance// measurementsunsigned int distance_buffer[] = {16000,16000, 16000, 16000, 16000, 16000, 16000,16000, 16000, 16000, 16000, 16000, 16000,16000, 16000, 16000};const int distance_length = 3;int distance_index = 0;// The overflow values for 2 octavesint frequencies[] = { 39, 42, 44, 47,50, 52, 56, 59, 63, 66, 70, 74, 79,84, 89, 94, 100, 105, 112, 118, 126,133, 141, 149};// Initial pitchint pitch = 160;// Initial volume and acceleration// parameterint lastAcc = 0;float volume = 0;//audio playback on pin 3byte speakerpin = 3; //index variable for position in//waveformvolatile byte waveindex = 0volatile byte currentvalue = 0;// Pin used for ultra-sonic sensorconst int pingPin = 7;// Pins for the potentiometersconst int sustainPin = 1;const int sensitivityPin = 2;// Pins for each finger of the left// handconst int finger1 = 9;const int finger2 = 10;const int finger3 = 11;const int finger4 = 12;int fingerValue = 0;long duration, inches, cm;void setup() {pinMode(3,OUTPUT); //Speaker on pin 3pinMode(finger1,INPUT);pinMode(finger2,INPUT);pinMode(finger3,INPUT);pinMode(finger4,INPUT);/**************************    PWM audio configuration****************************///set Timer2 to fast PWM mode//(doubles PWM frequency)bitSet(TCCR2A, WGM21); bitSet(TCCR2B, CS20);bitClear(TCCR2B, CS21);bitClear(TCCR2B, CS22);//enable interrupts now that registers// have been setsei();/*************************Timer 1 interrupt configuration*************************///disable interrupts while// registers are configuredcli();/* Normal port operation, pins disconnectedfrom timer operation (breaking pwm) */bitClear(TCCR1A, COM1A1);bitClear(TCCR1A, COM1A1);bitClear(TCCR1A, COM1A1);bitClear(TCCR1A, COM1A1);/* Mode 4, CTC with TOP set by registerOCR1A. Allows us to set variable timing forthe interrupt by writing new values toOCR1A. */bitClear(TCCR1A, WGM10);bitClear(TCCR1A, WGM11);bitSet(TCCR1B, WGM12);bitClear(TCCR1B, WGM13);/* set the clock prescaler to /8.  */bitClear(TCCR1B, CS10);bitSet(TCCR1B, CS11);bitClear(TCCR1B, CS12);/* Disable Force Output Compare forChannels A and B. */bitClear(TCCR1C, FOC1A);bitClear(TCCR1C, FOC1B);/* Initializes Output CompareRegister A at 160 to set theinitial pitch */OCR1A = 160;//disable input capture interruptbitClear(TIMSK1, ICIE1); //disable Output//Compare B Match InterruptbitClear(TIMSK1, OCIE1B); //enable Output//Compare A Match InterruptbitSet(TIMSK1, OCIE1A); //disable Overflow InterruptbitClear(TIMSK1, TOIE1); // enable interrupts now that// registers have been setsei();}// Timer overflow handlerISR(TIMER1_COMPA_vect) { /* timer1 ISR.  Every time it is called it sets speakerpin to the next value in waveform[]. Frequency modulation is done by changing the timing between successive calls of this  function, e.g. for a 1KHz tone, set the  timing so that it runs through waveform[] 1000 times a second. */ // reset waveindex if it has reached // the end of the array  if (waveindex > 102) {   waveindex = 0; } //Set the output value if (volume > 0.03) {  analogWrite(speakerpin,   waveformVolume[waveindex]); } waveindex++; // Update the pitch OCR1A = pitch; }  void loop(){ // Desactivate interputs, send a ping // message and wait for the answer. cli(); pinMode(pingPin, OUTPUT); digitalWrite(pingPin, LOW); delayMicroseconds(2); digitalWrite(pingPin, HIGH); delayMicroseconds(5); digitalWrite(pingPin, LOW); duration = pulseIn(pingPin, HIGH, 2000); sei(); // convert the time into a distance // in centimetres // and store in buffer distance_buffer[distance_index++   % distance_length] = duration / 20; //Find in the buffer the shortest // distance measured cm = 16000; for(int i = 0; i < distance_length; i++) {  cm = min(cm, distance_buffer[i]); } // Check which fingers are pressed fingerValue = 5; if(!digitalRead(finger4)){  fingerValue = 4; } if(!digitalRead(finger3)){  fingerValue = 3; } if(!digitalRead(finger2)){  fingerValue = 2; } if(!digitalRead(finger1)){  fingerValue = 1; } // Update the sustain and // sensitivity values float sustain =  map(analogRead(sustainPin), 0,  1024, 101, 130) / 100.0; int sensitivity =    map(analogRead(sensitivityPin),    0, 1024, 100, 200); // Update the volume volume = volume / sustain; if (volume < 0) {  volume = 0; }  // Check the accelerometer int acc = analogRead(0); int accDiff = lastAcc - acc; // Update the volume value if (accDiff > 5 * (200 - sensitivity)) {  volume += (float)   pow(accDiff,       sensitivity / 100.0) / 50000; } lastAcc = acc; // Check that volume is not higher than 1 if(volume > .95) {  volume = .95; } // Update the volume in the waveform for(int i = 0; i <= 102; i++) {  waveformVolume[i] =   ((waveform[i] - 127) * volume) + 127; } // Set the pitch according to the distance // between the two hands and the // fingers pressed if(cm < 102 && cm > 0) {  if(cm > 30) {   pitch = frequencies[7 +    (((cm - 30) / 24) * 4 + fingerValue - 1)];  }else{   pitch = map(cm, 0, 30, 39, 79);  } }else{  pitch = frequencies[7 +   (((102 - 30) / 24) * 4 + fingerValue - 1)]; } // Delay to avoid bouncing signals delay(50);}------------------------------------------------------",
      "html": "Here is the Arduino code required:<br><br>The real-time sound generation part is taken from <a href=\"http://blog.wingedvictorydesign.com/2009/05/29/generate-real-time-audio-on-the-arduino-using-pulse-code-modulation/all/1/\" rel=\"nofollow noopener noreferrer\">this great tutorial</a>.<br><br>------------------------------------------------------<br>// An array containing the waveform<br>// of a guitar sound<br>char waveform[] =<br>{125, 148, 171, 194, 209, 230, 252, 255,<br>253, 244, 235, 223, 207, 184, 169, 167,<br>163, 158, 146, 131, 126, 129, 134, 127,<br>105, 80, 58, 51,38, 22, 12,&nbsp; 2, 10, 35,<br>58, 75, 89, 103, 120, 141, 150, 148, 145,<br>144, 140, 129, 116, 105, 95, 86, 75, 72,<br>73, 76, 88, 103, 117, 121, 120, 115, 120,<br>143, 159, 162, 156, 155, 163, 184, 202,<br>214, 215, 211, 213, 212, 205, 196, 182,<br>162, 142, 118, 99, 84, 68, 54, 40, 28,<br>19, 10,&nbsp; 7,&nbsp; 0,&nbsp; 0,&nbsp; 5,&nbsp; 9, 14, 21, 33,<br>49, 59, 65, 75, 92, 110};<br><br>// We use this waveform to change the<br>// volume of the output<br>char waveformVolume[] =<br>{125, 148, 171, 194, 209, 230, 252, 255,<br>253, 244, 235, 223, 207, 184, 169, 167,<br>163, 158, 146, 131, 126, 129, 134, 127,<br>105, 80, 58, 51,38, 22, 12,&nbsp; 2, 10, 35,<br>58, 75, 89, 103, 120, 141, 150, 148, 145,<br>144, 140, 129, 116, 105, 95, 86, 75, 72,<br>73, 76, 88, 103, 117, 121, 120, 115, 120,<br>143, 159, 162, 156, 155, 163, 184, 202,<br>214, 215, 211, 213, 212, 205, 196, 182,<br>162, 142, 118, 99, 84, 68, 54, 40, 28,<br>19, 10,&nbsp; 7,&nbsp; 0,&nbsp; 0,&nbsp; 5,&nbsp; 9, 14, 21, 33,<br>49, 59, 65, 75, 92, 110};<br>// An array used as a buffer to avoid<br>// erroneous punctual distance<br>// measurements<br>unsigned int distance_buffer[] = {16000,<br>16000, 16000, 16000, 16000, 16000, 16000,<br>16000, 16000, 16000, 16000, 16000, 16000,<br>16000, 16000, 16000};<br><br>const int distance_length = 3;<br>int distance_index = 0;<br><br>// The overflow values for 2 octaves<br>int frequencies[] = { 39, 42, 44, 47,<br>50, 52, 56, 59, 63, 66, 70, 74, 79,<br>84, 89, 94, 100, 105, 112, 118, 126,<br>133, 141, 149};<br><br>// Initial pitch<br>int pitch = 160;<br><br>// Initial volume and acceleration<br>// parameter<br>int lastAcc = 0;<br>float volume = 0;<br><br>//audio playback on pin 3<br>byte speakerpin = 3; <br><br>//index variable for position in<br>//waveform<br>volatile byte waveindex = 0<br>volatile byte currentvalue = 0;<br><br>// Pin used for ultra-sonic sensor<br>const int pingPin = 7;<br><br>// Pins for the potentiometers<br>const int sustainPin = 1;<br>const int sensitivityPin = 2;<br><br>// Pins for each finger of the left<br>// hand<br>const int finger1 = 9;<br>const int finger2 = 10;<br>const int finger3 = 11;<br>const int finger4 = 12;<br><br>int fingerValue = 0;<br><br>long duration, inches, cm;<br><br>void setup() {<br><br>pinMode(3,OUTPUT); //Speaker on pin 3<br><br>pinMode(finger1,INPUT);<br>pinMode(finger2,INPUT);<br>pinMode(finger3,INPUT);<br>pinMode(finger4,INPUT);<br><br><br>/**************************<br>&nbsp;&nbsp;&nbsp; PWM audio configuration<br>****************************/<br>//set Timer2 to fast PWM mode<br>//(doubles PWM frequency)<br>bitSet(TCCR2A, WGM21); <br>bitSet(TCCR2B, CS20);<br>bitClear(TCCR2B, CS21);<br>bitClear(TCCR2B, CS22);<br><br>//enable interrupts now that registers<br>// have been set<br>sei();<br><br><br>/*************************<br>Timer 1 interrupt configuration<br>*************************/<br>//disable interrupts while<br>// registers are configured<br>cli();<br><br>/* Normal port operation, pins disconnected<br>from timer operation (breaking pwm) */<br>bitClear(TCCR1A, COM1A1);<br>bitClear(TCCR1A, COM1A1);<br>bitClear(TCCR1A, COM1A1);<br>bitClear(TCCR1A, COM1A1);<br><br>/* Mode 4, CTC with TOP set by register<br>OCR1A. Allows us to set variable timing for<br>the interrupt by writing new values to<br>OCR1A. */<br>bitClear(TCCR1A, WGM10);<br>bitClear(TCCR1A, WGM11);<br>bitSet(TCCR1B, WGM12);<br>bitClear(TCCR1B, WGM13);<br><br>/* set the clock prescaler to /8.&nbsp; */<br>bitClear(TCCR1B, CS10);<br>bitSet(TCCR1B, CS11);<br>bitClear(TCCR1B, CS12);<br><br>/* Disable Force Output Compare for<br>Channels A and B. */<br>bitClear(TCCR1C, FOC1A);<br>bitClear(TCCR1C, FOC1B);<br><br>/* Initializes Output Compare<br>Register A at 160 to set the<br>initial pitch */<br>OCR1A = 160;<br><br>//disable input capture interrupt<br>bitClear(TIMSK1, ICIE1); <br>//disable Output<br>//Compare B Match Interrupt<br>bitClear(TIMSK1, OCIE1B); <br>//enable Output<br>//Compare A Match Interrupt<br>bitSet(TIMSK1, OCIE1A); <br>//disable Overflow Interrupt<br>bitClear(TIMSK1, TOIE1); <br><br>// enable interrupts now that<br>// registers have been set<br>sei();<br>}<br><br>// Timer overflow handler<br>ISR(TIMER1_COMPA_vect) {<br><br>&nbsp;/* timer1 ISR.&nbsp; Every time it<br>&nbsp;is called it sets speakerpin to the<br>&nbsp;next value in waveform[]. Frequency<br>&nbsp;modulation is done by changing the<br>&nbsp;timing between successive calls of<br>&nbsp;this&nbsp; function, e.g. for a 1KHz tone,<br>&nbsp;set the&nbsp; timing so that it runs<br>&nbsp;through waveform[] 1000 times<br>&nbsp;a second. */<br><br>&nbsp;// reset waveindex if it has reached<br>&nbsp;// the end of the array <br><br>&nbsp;if (waveindex &gt; 102) { <br>&nbsp; waveindex = 0;<br>&nbsp;}<br><br>&nbsp;//Set the output value<br>&nbsp;if (volume &gt; 0.03) {<br>&nbsp; analogWrite(speakerpin,<br>&nbsp;&nbsp; waveformVolume[waveindex]);<br>&nbsp;}<br>&nbsp;waveindex++;<br><br>&nbsp;// Update the pitch<br>&nbsp;OCR1A = pitch; <br>}&nbsp; <br><br><br>void loop()<br>{<br>&nbsp;// Desactivate interputs, send a ping<br>&nbsp;// message and wait for the answer.<br>&nbsp;cli();<br>&nbsp;pinMode(pingPin, OUTPUT);<br>&nbsp;digitalWrite(pingPin, LOW);<br>&nbsp;delayMicroseconds(2);<br>&nbsp;digitalWrite(pingPin, HIGH);<br>&nbsp;delayMicroseconds(5);<br>&nbsp;digitalWrite(pingPin, LOW);<br>&nbsp;duration = pulseIn(pingPin, HIGH, 2000);<br>&nbsp;sei();<br>&nbsp;// convert the time into a distance<br>&nbsp;// in centimetres<br>&nbsp;// and store in buffer<br>&nbsp;distance_buffer[distance_index++ <br>&nbsp; % distance_length] = duration / 20;<br><br>&nbsp;//Find in the buffer the shortest<br>&nbsp;// distance measured<br>&nbsp;cm = 16000;<br>&nbsp;for(int i = 0; i &lt; distance_length; i++) {<br>&nbsp; cm = min(cm, distance_buffer[i]);<br>&nbsp;}<br><br>&nbsp;// Check which fingers are pressed<br>&nbsp;fingerValue = 5;<br>&nbsp;if(!digitalRead(finger4)){<br>&nbsp; fingerValue = 4;<br>&nbsp;}<br>&nbsp;if(!digitalRead(finger3)){<br>&nbsp; fingerValue = 3;<br>&nbsp;}<br>&nbsp;if(!digitalRead(finger2)){<br>&nbsp; fingerValue = 2;<br>&nbsp;}<br>&nbsp;if(!digitalRead(finger1)){<br>&nbsp; fingerValue = 1;<br>&nbsp;}<br><br>&nbsp;// Update the sustain and<br>&nbsp;// sensitivity values<br>&nbsp;float sustain = <br>&nbsp;map(analogRead(sustainPin), 0,<br>&nbsp; 1024, 101, 130) / 100.0;<br>&nbsp;int sensitivity =<br>&nbsp;&nbsp;&nbsp; map(analogRead(sensitivityPin),<br>&nbsp;&nbsp;&nbsp; 0, 1024, 100, 200);<br><br>&nbsp;// Update the volume<br>&nbsp;volume = volume / sustain;<br>&nbsp;if (volume &lt; 0) {<br>&nbsp; volume = 0;<br>&nbsp;}<br>&nbsp;<br>&nbsp;// Check the accelerometer<br>&nbsp;int acc = analogRead(0);<br>&nbsp;int accDiff = lastAcc - acc;<br><br>&nbsp;// Update the volume value<br>&nbsp;if (accDiff &gt; 5 * (200 - sensitivity)) {<br>&nbsp; volume += (float)<br>&nbsp;&nbsp; pow(accDiff,<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; sensitivity / 100.0) / 50000;<br>&nbsp;}<br>&nbsp;lastAcc = acc;<br><br>&nbsp;// Check that volume is not higher than 1<br>&nbsp;if(volume &gt; .95) {<br>&nbsp; volume = .95;<br>&nbsp;}<br><br>&nbsp;// Update the volume in the waveform<br>&nbsp;for(int i = 0; i &lt;= 102; i++) {<br>&nbsp; waveformVolume[i] =<br>&nbsp;&nbsp; ((waveform[i] - 127) * volume) + 127;<br>&nbsp;}<br><br>&nbsp;// Set the pitch according to the distance<br>&nbsp;// between the two hands and the<br>&nbsp;// fingers pressed<br>&nbsp;if(cm &lt; 102 &amp;&amp; cm &gt; 0) {<br>&nbsp; if(cm &gt; 30) {<br>&nbsp;&nbsp; pitch = frequencies[7 +<br>&nbsp;&nbsp;&nbsp; (((cm - 30) / 24) * 4 + fingerValue - 1)];<br>&nbsp; }else{<br>&nbsp;&nbsp; pitch = map(cm, 0, 30, 39, 79);<br>&nbsp; }<br>&nbsp;}else{<br>&nbsp; pitch = frequencies[7 +<br>&nbsp;&nbsp; (((102 - 30) / 24) * 4 + fingerValue - 1)];<br>&nbsp;}<br><br>&nbsp;// Delay to avoid bouncing signals<br>&nbsp;delay(50);<br>}<br><br>------------------------------------------------------<br><br><br>"
    }
  ],
  "author": {
    "name": "Jell",
    "url": "https://www.instructables.com/member/Jell/"
  }
}]